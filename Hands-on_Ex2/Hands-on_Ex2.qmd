---
title: "Hands-on Exercise 2"
editor: visual
---

Overview

In this hands-on exercise, you will learn how to compute Global and local Measure of Spatial Autocorrelation(GLSA) by using spdep package. By the end to this hands-on exercise, you will be able to:

Importing geospatial data using appropriate function of sf package

Importing csv file using appropriate function of readr package,

perform relational join using appropriate join function of dplyr package,

compute Global Spatial Autocorrelation(GSA) statistics by using appropriate functions of spdep package.

Plotting Moran Scatterplot,

compute and plot spatial correlogram using appropriate function of spdep package.

compute local indicator of spatial association statistics for deteckting clusters and outliers by using appropriate functions spdep package.

compute getis-ord's gi-statistics for detecting hot spot or/and cold spot area by using approprate functions of spdep package: and to visualise the analysis output bu using tmap package.

The Study Area and Data

2 set of data will be used in this hands-on exercise

Hunan province administrative boundary layer at county level. This is a geospatial data set in ESRI shapefile format.

Hunan_2012.csv: This csv file contains selected Hunan;s local development indicators in 2012.

Before we started, ensure that spdep, sf, tmap, tidyverse packages of R are currenly installed in My R.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse)
```

Getting the Data into R environment

st_read() of sf package to import Hunan shape file into R. The imported shapefile will be simple features Object of sf.

```{r}
hunan <- st_read("data/geospatial", layer = "Hunan")
```

Import csv file into r environment

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

Performing relational join

update the attribute table of hunan's Spatialpolygons DataFrame with the attribute fields of hunan2012 dataframe.

```{r}
hunan <- left_join(hunan,hunan2012)
```

Visualising Regional Development Indicator

prepare a basemap and a choropleth map showing the dstribution of GDPPC 2012 by using qtm() of tmap package.

```{r}
equal <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(hunan) +
  tm_fill("GDPPC",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

Global Spatial Autocorrelation

In this section, you will learn gloabal spatial autocorrelation statistics and to perform spatial complete randomness test for global spatial autocorrelation.

Computing Contiguity Spatial Weights

Before we need to construct a spatial weights of the study area. The spatial weights is used to define the neighbourhood relationships between the geographical units in the study area.

poly2nu() of spdep package is used to compute contiguity weight matrices for the study area. This function buids a neighbours list based on regions with contiguous boundaries.

if you look at the documentation you will see that you can pass 'QUEEN' argument that takes TRUE or False as options. If you do not specify this argument the default is set to True, that is, if you dont specify queen =FALSE this function will return a list of first order neighbours using Queeen criteria.

The code chunk below shows the Queen contiguity weight matrix.

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

Row-standardised weights matrix

assignning weights to each neighboring polygon. In our case, each neighboring polugon will be assigned equal weight(style='W'). This is accomplished by assgining the fration 1/ to each neighbouring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors's values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over-or under-setimating the true nature of the spactial autocorrelation in the data. For this example, we stick with the style ="W" option for simplicity's sake but note that other more robust options are available, notably style="B".

```{r}
rswm_q <- nb2listw(wm_q, style = "W", zero.policy =  TRUE)
rswm_q
```

Maron's test

The code chunk below performs moran's statistical testing using moran.test().

```{r}
moran.test(hunan$GDPPC, listw = rswm_q, zero.policy = TRUE, na.action = na.omit)
```

Question: What statistical conclusion can you draw from the output above?

The P- value is 1.095e-06 which is extremely statistically significant. Computing Monte carlo Moran's I Z value is 0.3 which means that the data are clustered and the observation tend to be similar.

The code chunk below performs permutation test for moran's I statistic by using moran.mc() of spdep. A total of 1000 simulation will be performed.

```{r}
set.seed(1234)
bperm= moran.mc(hunan$GDPPC, 
                listw=rswm_q, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
bperm
```

Question:What statistical conclusion can you draw from the out put above?

Answer: The The P-value change to 0.001 which is still statistically significant. The moran's I test value remains 0.3 which means that the data are cluster.

Examine the Moran's I test simulation in a greater detail.

hist() and abline() of R graphic are used.

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res,freq = TRUE, breaks = 20, xlab = "Simulated Moran's I")
abline(v=0, col="red")
```

Question: What statistical observation can you draw from the output above?

Answer: The statistical value is from -0.18 to 0.27. so we can come out with the upper boundary and lower boundary. The median is -0.02125 and the mean is -0.01505.

Challenge: Instead of using Base Graph to plot the values, plot the values by using ggplot2 package.

```{r}
ggplot(data=hunan, 
       aes(x = as.numeric(`GDPPC`)))+
  geom_histogram(bins=20, 
                 color="red", 
                 fill="light blue") +
  labs(title = "Histogram of bperm",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Simulated Moran's I)",
      y = "Frequency")
```

Global Spatial Autocorrelation: Geary's

In this section, you will learn how to perform Geary's c statistics testing by using appropriate functions of spdep package.

Geary's C test

```{r}
geary.test(hunan$GDPPC, listw = rswm_q)
```

Question: What statistical conclusion can you draw from the output above?

Answer: From the Geary C statistic standard deviation is 3,6 which is not bad, and p-value is 0.0001526 which is statistically significant. Geary C value is \< 1 means that the data is clustered and tend to be simillar and c is

Computing Monte Carlo Geary's C

```{r}
set.seed(1234)
bperm=geary.mc(hunan$GDPPC, 
               listw=rswm_q, 
               nsim=999)
bperm
```

Question What statistical conclusion can you draw from the output above?

Answer: after the Monte-carlo simulation of Geary C the statistic value is quite stable as 0.69072

Visualising the Monte Carlo Geary's C

```{r}
mean(bperm$res[1:999])
```

```{r}
var(bperm$res[1:999])
```

```{r}
summary(bperm$res[1:999])
```

```{r}
hist(bperm$res, freq=TRUE, breaks=20, xlab="Simulated Geary c")
abline(v=1, col="red") 
```

Question: What statistical observation can you draw from the output?

The median and mean is 1 the data has a symmetric distribution. The p-value = 0.001 which shows that the result is still statically significant. The Null-hypothesis can be rejected.

## Spatial Correlogram

Compute Moran's correlogram

sp.correlogram() is to compute a 6 lag spatial correlogram of GDPPC.

```{r}
MI_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="I", 
                          style="W")
plot(MI_corr)
```

By plotting the output might not allow us to provide complete interpretation. This is because not all autocorrelation values are statistically significant.

```{r}
print(MI_corr)
```

Question : what statistical observation can you draw from the plot above?

Standard deviation of 3,4 and 6 is not good and the p-value shows that they are not statistically significant. Hence, we can ignore them in the future.

Compute Geary's C correlogram and plot

```{r}
GC_corr <- sp.correlogram(wm_q, 
                          hunan$GDPPC, 
                          order=6, 
                          method="C", 
                          style="W")
plot(GC_corr)
```

print out the analysis report.

```{r}
print(GC_corr)
```

Computing local Moran's I

```{r}
fips <- order(hunan$County)
localMI <- localmoran(hunan$GDPPC, rswm_q)
head(localMI)
```

```{r}
printCoefmat(data.frame(localMI[fips,], row.names=hunan$County[fips]), check.names=FALSE)
```

Mapping the local Moran's I

```{r}
hunan.localMI <- cbind(hunan,localMI) %>%
  rename(Pr.Ii = Pr.z....E.Ii..)
```

Mapping local moran's I values

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)
```

Producing a choropleth map of moran's p value by tmap

```{r}
tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)
```

Mapping both local Moran's I value and p-values

```{r}
localMI.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Ii", 
          style = "pretty", 
          title = "local moran statistics") +
  tm_borders(alpha = 0.5)

pvalue.map <- tm_shape(hunan.localMI) +
  tm_fill(col = "Pr.Ii", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues", 
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5)

tmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)
```

Creating a LISA Cluster Map.

Plotting Moran scatter plot

```{r}
nci <- moran.plot(hunan$GDPPC, rswm_q,
                  labels=as.character(hunan$County), 
                  xlab="GDPPC 2012", 
                  ylab="Spatially Lag GDPPC 2012")
```

Plotting Moran scatterplot with standardised variable.

Use scale() to centers and scales the variable by subtracting the mean to corresponding columns and scaling is done by dividing the centered variable bu their standard deviations.

```{r}
hunan$Z.GDPPC <- scale(hunan$GDPPC) %>% as.vector 
```

The as.vector() added at the end is to mke sure that the data type we get out of this is a vector and the map neatly into our dataframe.

```{r}
nci2 <- moran.plot(hunan$Z.GDPPC, rswm_q,
                   labels=as.character(hunan$County),
                   xlab="z-GDPPC 2012", 
                   ylab="Spatially Lag z-GDPPC 2012")
```

Preparing LISA map classes

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
```

```{r}
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
```

```{r}
C_mI <- localMI[,1] - mean(localMI[,1])    
```

```{r}
signif <- 0.05       
```

```{r}
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
```

```{r}
quadrant[localMI[,5]>signif] <- 0
```

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI))
DV <- hunan$GDPPC - mean(hunan$GDPPC)     
C_mI <- localMI[,1] - mean(localMI[,1])    
signif <- 0.05       
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI[,5]>signif] <- 0
```

Plotting LISA map

```{r}
hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)
```

For effective interpretation, it is good to plot both the local Moran's I values map and its corresponding p-values next to each other.

```{r}
gdppc <- qtm(hunan, "GDPPC")

hunan.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(hunan.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5)

tmap_arrange(gdppc, LISAmap, asp=1, ncol=2)
```

An alternative spatial statistics to detect spatial anomalies is the Getis and Ord's G-statistics (Getis and Ord, 1972; Ord and Getis, 1995). It looks at neighbours within a defined proximity to identify where either high or low values clutser spatially. Here, statistically significant hot-spots are recognised as areas of high values where other areas within a neighbourhood range also share high values too.

The analysis consists of three steps:

Deriving spatial weight matrix

computing Gi statistics

Mapping Gi statistics

Deriving distance-based weight matrix

First, we need to define a new set of neighbours. Whist the spatial autocorrelation considered units which shared borders, for Getis-Ord we are defining neighbours based on distance.

There are two type of distance-based proximity matrix, they are:

-   fixed distance weight matrix; and

-   adaptive distance weight matrix.

Deriving the centroid

We will need points to associate with each polygon before we can make our connectivity graph. it will be a little more complicated than just running st_centroid() o the sf object: us.bound. we need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bond. Our function will be st_centroid(). We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation.

To get our longitude value we mape the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation\[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

```{r}
coords <- cbind(longitude, latitude)
```

Firstly, we need to determine the upper limit for distance band by using the following steps:

-   Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other by using [*knearneigh()*](https://r-spatial.github.io/spdep/reference/knearneigh.html) of **spdep**.

-   Convert the knn object returned by *knearneigh()* into a neighbours list of class nb with a list of integer vectors containing neighbour region number ids by using [*knn2nb()*](https://r-spatial.github.io/spdep/reference/knn2nb.html).

-   Return the length of neighbour relationship edges by using [*nbdists()*](https://r-spatial.github.io/spdep/reference/nbdists.html) of **spdep**. The function returns in the units of the coordinates if the coordinates are projected, in km otherwise.

-   Remove the list structure of the returned object by using [**unlist()**](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/unlist).

```{r}

k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The report shows that the largest first nearest neighbour distance is 61.79km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

Computing fixed distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

nb2listw() is used to convert the nv ojject into spatial weight object.

```{r}
wm62_lw <- nb2listw(wm_d62, style = 'B')
summary(wm62_lw)
```

Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densly settled areas(usually the urban areas) tend to have more neighbours and the less densely settle areas tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry as shown in the code below.

```{r}
knn <- knn2nb(knearneigh(coords, k=8))
knn
```

nb2lisw is used to convert the nb object into spatial weights object.

```{r}
knn_lw <- nb2listw(knn, style = 'B')
summary(knn_lw)
```

Computing Gi statistics

Gi statistics using fixed distance

```{r}
fips <- order(hunan$County)
gi.fixed <- localG(hunan$GDPPC, wm62_lw)
gi.fixed
```

```{r}
hunan.gi <- cbind(hunan, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

Mapping Gi values with fixed distance weights

```{r}
gdppc <- qtm(hunan, "GDPPC")

Gimap <-tm_shape(hunan.gi) +
  tm_fill(col = "gstat_fixed", 
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, Gimap, asp=1, ncol=2)
```

Gi statistics using adaptive distance.

```{r}
fips <- order(hunan$County)
gi.adaptive <- localG(hunan$GDPPC, knn_lw)
hunan.gi <- cbind(hunan, as.matrix(gi.adaptive)) %>%
  rename(gstat_adaptive = as.matrix.gi.adaptive.)
```

```{r}
gdppc<- qtm(hunan, "GDPPC")

Gimap <- tm_shape(hunan.gi) + 
  tm_fill(col = "gstat_adaptive", 
          style = "pretty", 
          palette="-RdBu", 
          title = "local Gi") + 
  tm_borders(alpha = 0.5)

tmap_arrange(gdppc, 
             Gimap, 
             asp=1, 
             ncol=2)
```

Question: What statistical observation can you draw from the GI map above?
