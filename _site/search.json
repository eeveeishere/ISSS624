[
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class_Ex2",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\nIn this in-class data, two geospatial data sets will be used, they are:\ngeo_export\nnga_admbnda_adm2_osgod_20190417"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#importing-water-point-geospatial-data",
    "href": "In-class_Ex2/In-class_Ex2.html#importing-water-point-geospatial-data",
    "title": "In-class_Ex2",
    "section": "Importing water point geospatial data",
    "text": "Importing water point geospatial data\nFirst, we are going to import the water point geospatial data by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326)%>%\n  filter(clean_coun == \"Nigeria\")\n\nReading layer `geo_export' from data source \n  `C:\\eeveeishere\\ISSS624\\In-class_Ex2\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 406566 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -92.05073 ymin: -27.31495 xmax: 92.32694 ymax: 26.65622\nGeodetic CRS:  WGS 84\n\n\nnext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\nNext, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\eeveeishere\\ISSS624\\In-class_Ex2\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "In-class_Ex2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\")%>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#eda",
    "href": "In-class_Ex2/In-class_Ex2.html#eda",
    "title": "In-class_Ex2",
    "section": "EDA",
    "text": "EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nExtracting funtional water point\nusing classes in status_cle field.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\nSo all functional data will be called as wpt_functional.\nSimilarly for non-functional water point.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nExtracting water point with Unknown class.\nUsing filter() of dplyr to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "In-class_Ex2",
    "section": "Performing point in polygon count",
    "text": "Performing point in polygon count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nSaving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nNow I got the tidy sf data table and we will save the sf data table in rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "href": "In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "title": "In-class_Ex2",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#grading-criteria",
    "href": "Take-home_Ex1/Take-home_Ex1.html#grading-criteria",
    "title": "Take-home Exercise 1",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nThis exercise will be graded by using the following criteria:\n\nGeospatial Data Wrangling (20 marks): This is an important aspect of geospatial analytics. You will be assessed on your ability to employ appropriate R functions from various R packages specifically designed for modern data science such as readr, tidyverse (tidyr, dplyr, ggplot2), sf just to mention a few of them, to perform the entire geospatial data wrangling processes, including. This is not limited to data import, data extraction, data cleaning and data transformation. Besides assessing your ability to use the R functions, this criterion also includes your ability to clean and derive appropriate variables to meet the analysis need. (Warning: All data are like vast grassland full of land mines. Your job is to clear those mines and not to step on them).\nGeospatial Analysis (30 marks): In this exercise, you are expected to use the appropriate thematic and analytics mapping techniques and R functions introduced in class to analysis the geospatial data prepared. You will be assessed on your ability to derive analytical maps by using appropriate rate mapping techniques.\nGeovisualisation (20 marks): In this section, you will be assessed on your ability to communicate the complex spatial statistics results in business friendly visual representations. This course is geospatial centric, hence, it is important for you to demonstrate your competency in using appropriate geovisualisation techniques to reveal and communicate the findings of your analysis.\nReproducibility (20 marks): This is an important learning outcome of this exercise. You will be assessed on your ability to provide a comprehensive documentation of the analysis procedures in the form of code chunks of Markdown. It is important to note that it is not enough by merely providing the code chunk without any explanation on the purpose and R function(s) used.\nBonus (10 marks): Demonstrate your ability to employ methods beyond what you had learned in class to gain insights from the data. The methods used must be geospatial in nature."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#submission-instructions",
    "href": "Take-home_Ex1/Take-home_Ex1.html#submission-instructions",
    "title": "Take-home Exercise 1",
    "section": "Submission Instructions",
    "text": "Submission Instructions\n\nThe write-up of the take-home exercise must be in Quarto html document format. You are required to publish the write-up on Netlify.\nThe R project of the take-home exercise must be pushed onto your Github repository.\nYou are required to provide the links to Netlify service of the take-home exercise write-up and github repository on eLearn."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#due-date",
    "href": "Take-home_Ex1/Take-home_Ex1.html#due-date",
    "title": "Take-home Exercise 1",
    "section": "Due Date",
    "text": "Due Date\n29th November 2022 (Tuesday), 11.59pm (midnight)."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#setting-the-scene",
    "href": "Take-home_Ex1/Take-home_Ex1.html#setting-the-scene",
    "title": "Take home Exercise 1",
    "section": "Setting the Scene",
    "text": "Setting the Scene\nWater is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world’s accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take home Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\nIn this in-class data, two geospatial data sets will be used, they are:\ngeo_export\nnga_admbnda_adm2_osgod_20190417"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#importing-water-point-geospatial-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#importing-water-point-geospatial-data",
    "title": "Take home Exercise 1",
    "section": "Importing water point geospatial data",
    "text": "Importing water point geospatial data\nFirst, we are going to import the water point geospatial data by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326)%>%\n  filter(clean_coun == \"Nigeria\")\n\nnext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\nNext, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take home Exercise 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\")%>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#eda",
    "href": "Take-home_Ex1/Take-home_Ex1.html#eda",
    "title": "Take home Exercise 1",
    "section": "EDA",
    "text": "EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\nExtracting funtional water point\nusing classes in status_cle field.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\nSo all functional data will be called as wpt_functional.\nSimilarly for non-functional water point.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nExtracting water point with Unknown class.\nUsing filter() of dplyr to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "Take home Exercise 1",
    "section": "Performing point in polygon count",
    "text": "Performing point in polygon count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nSaving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nNow I got the tidy sf data table and we will save the sf data table in rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")\n\n\nnga_wp <- st_transform(nga_wp, 26391)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take home Exercise 1",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\") +\n  tm_layout(legend.height = 0.25, legend.width = 0.35)\nwp_functional <- qtm(nga_wp, \"wpt functional\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\nunknown <- qtm(nga_wp, \"wpt unknown\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\n\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2 )\n\n\n\n\nFrom the graph we can tell that the number of water point is not evenly distributed.\n\nst_crs(nga_wp)\n\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    DATUM[\"World Geodetic System 1984\",\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualising-regional-development-indicator",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualising-regional-development-indicator",
    "title": "Take home Exercise 1",
    "section": "Visualising Regional Development Indicator",
    "text": "Visualising Regional Development Indicator\n\nequal <- tm_shape(nga_wp) +\n  tm_fill(\"wpt non-functional\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile <- tm_shape(nga_wp) +\n  tm_fill(\"wpt non-functional\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)\n\n\n\n\nThe data is in polygon, however, there is a large variation in polygon size. To ensure the consistency scale of analysis, fixed distance method will be using."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#determine-the-centroid-for-each-area",
    "href": "Take-home_Ex1/Take-home_Ex1.html#determine-the-centroid-for-each-area",
    "title": "Take home Exercise 1",
    "section": "Determine the centroid for each area",
    "text": "Determine the centroid for each area\n\ncoords <- st_centroid(st_geometry(nga_wp))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#determine-the-cutoff-distance-for-fixed-distance-weight-matrix",
    "href": "Take-home_Ex1/Take-home_Ex1.html#determine-the-cutoff-distance-for-fixed-distance-weight-matrix",
    "title": "Take home Exercise 1",
    "section": "Determine the cutoff distance for fixed distance weight matrix",
    "text": "Determine the cutoff distance for fixed distance weight matrix\n\nk1 <- knn2nb(knearneigh(coords))\nk1dists <- unlist(nbdists(k1, coords))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  2.675  12.814  20.300  22.075  27.800  72.027 \n\n\nThe summary report shows that the maximum distance is 72.027 km, so this will be using as the upper threshold so that the distance band is large enough to ensure all features will have at least one neighbor.\n\nthreshold <- max(unlist(nbdists(k1, coords)))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#computing-fixed-distance-weight-matrix",
    "href": "Take-home_Ex1/Take-home_Ex1.html#computing-fixed-distance-weight-matrix",
    "title": "Take home Exercise 1",
    "section": "Computing Fixed distance weight matrix",
    "text": "Computing Fixed distance weight matrix\n\nwm_d73 <- dnearneigh(coords, 0, threshold)\nwm_d73\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18050 \nPercentage nonzero weights: 3.012973 \nAverage number of links: 23.32041 \n\n\nWe are able to identify there is an average of 23 neighbors per region."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-distance-weight-matrix",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualizing-the-distance-weight-matrix",
    "title": "Take home Exercise 1",
    "section": "Visualizing the Distance weight Matrix",
    "text": "Visualizing the Distance weight Matrix\n\npar(mfrow=c(1,2))\nplot(nga_wp$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(nga_wp$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d73, coords, add=TRUE, pch = 19, cex = 0.6)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#assigning-weights-to-each-neighboring-polygon",
    "href": "Take-home_Ex1/Take-home_Ex1.html#assigning-weights-to-each-neighboring-polygon",
    "title": "Take home Exercise 1",
    "section": "Assigning weights to each neighboring polygon",
    "text": "Assigning weights to each neighboring polygon\n\nwm73_lw <- nb2listw(wm_d73, \n                   style=\"W\", \n                   zero.policy = TRUE)\nsummary (wm73_lw )\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 18050 \nPercentage nonzero weights: 3.012973 \nAverage number of links: 23.32041 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 \n 5  8 12 21 34 33 33 37 28 34 28 20 19 22 15 13 13 16 12 15 16 13 11 11  6 14 \n27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 \n10  5 14 14 13  7  9  9 11  9 11 14 13 11  9  5  3  5  6  9  8  9  4  5  3  3 \n53 54 55 56 57 58 59 60 61 62 63 64 65 67 68 \n 2  4  5  4  6  5  2  5  5 10  7  3  3  4  1 \n5 least connected regions:\n90 112 123 237 670 with 1 link\n1 most connected region:\n585 with 68 links\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 774 599076 774 130.1845 3126.732\n\n\nIn our case, each neighboring polygon will be assigned equal weight (style=“W”). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors’ values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#see-the-weight-of-the-first-polygons-neighbors",
    "href": "Take-home_Ex1/Take-home_Ex1.html#see-the-weight-of-the-first-polygons-neighbors",
    "title": "Take home Exercise 1",
    "section": "see the weight of the first polygon’s neighbors",
    "text": "see the weight of the first polygon’s neighbors\n\nwm73_lw$weights[10]\n\n[[1]]\n [1] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n [7] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[13] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[19] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[25] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[31] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[37] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[43] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[49] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[55] 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302 0.01587302\n[61] 0.01587302 0.01587302 0.01587302"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#using-morans-for-global-spatial-autocorrelation",
    "href": "Take-home_Ex1/Take-home_Ex1.html#using-morans-for-global-spatial-autocorrelation",
    "title": "Take home Exercise 1",
    "section": "Using Moran’s | for Global Spatial Autocorrelation",
    "text": "Using Moran’s | for Global Spatial Autocorrelation\n\nmoran.test(nga_wp$`wpt non-functional`, \n           listw=wm73_lw, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: wm73_lw    \n\nMoran I statistic standard deviate = 22.517, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     0.3273418398     -0.0012936611      0.0002130078 \n\n\nFrom the Moran’s | test, we can see that the p-value is 2.2e-16 and I value is 0.3264 which means that the overall spatial autocorrelation tend to be similarly clustered and is statically significant, null hypothesis can be rejected. To furture clarify the assumption of Moran’s I. Monte Carlo simulation will be performed."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#computing-monte-carlo-morans",
    "href": "Take-home_Ex1/Take-home_Ex1.html#computing-monte-carlo-morans",
    "title": "Take home Exercise 1",
    "section": "Computing Monte Carlo Moran’s |",
    "text": "Computing Monte Carlo Moran’s |\nA total of 1000 simulation will be performed\n\nset.seed(1234)\nMC_NF= moran.mc(nga_wp$`wpt non-functional`, \n                listw=wm73_lw, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nMC_NF\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: wm73_lw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.32734, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\n\nset.seed(1234)\nMC_F= moran.mc(nga_wp$`wpt functional`, \n                listw=wm73_lw, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nMC_F\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt functional` \nweights: wm73_lw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.50517, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nFrom the result Moran | value is > 0,the overall spatial autocorrelation tend to be similarly clustered. The p value is 0.001 which is statically significant. Therefore, null hypothesis should be rejected. There is sign of clustering."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#section-1",
    "href": "Take-home_Ex1/Take-home_Ex1.html#section-1",
    "title": "Take home Exercise 1",
    "section": "",
    "text": "Visualising Monte Carlo simulation of Moran’s |\n\nhist(MC_NF$res, \n     freq=TRUE, \n     breaks=100, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\nhist(MC_F$res, \n     freq=TRUE, \n     breaks=100, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#compute-morans-correlogram",
    "href": "Take-home_Ex1/Take-home_Ex1.html#compute-morans-correlogram",
    "title": "Take home Exercise 1",
    "section": "Compute Moran’s | correlogram",
    "text": "Compute Moran’s | correlogram\n\nplot(MI_corr)\n\nFrom the correlogram, it tells that Moran’s | decreasing when lags increase. Which means that the observation is moving more Dispersed with increasing of distance.\n\nplot(MI_corr_F)\n\nFrom the correlogram, it tells that Moran’s | decreasing when lags increase. Which means that the observation is moving more Dispersed with increasing of distance."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#cluster-and-outlier-analysis",
    "title": "Take home Exercise 1",
    "section": "Cluster and Outlier Analysis",
    "text": "Cluster and Outlier Analysis\nlocal Moran’s | will be used to identify the spatial cluster and outliers.\n\nfips <- order(nga_wp$ADM2_EN)\nlocalMI_dw <- localmoran(nga_wp$`wpt non-functional`, wm73_lw)\nlocalMI_dw_FUN <- localmoran(nga_wp$`wpt functional`, wm73_lw)\nhead(localMI_dw)\n\n            Ii          E.Ii       Var.Ii       Z.Ii Pr(z != E(Ii))\n1  0.361394136 -9.995243e-04 1.128237e-02  3.4117747   0.0006454144\n2  0.074414950 -4.092463e-05 4.705097e-04  3.4325327   0.0005979717\n3  1.258199847 -1.627684e-03 6.280738e-01  1.5896655   0.1119102304\n4 -0.006652507 -5.427505e-05 4.151689e-03 -0.1024036   0.9184363392\n5  0.082615173 -2.590965e-04 3.325093e-03  1.4372021   0.1506605779\n6  0.006672593 -1.538445e-07 5.523369e-06  2.8392431   0.0045220690\n\n\n\nhead(localMI_dw_FUN)\n\n          Ii          E.Ii      Var.Ii      Z.Ii Pr(z != E(Ii))\n1 0.43151603 -7.191834e-04 0.008120236 4.7966255   1.613609e-06\n2 0.27475350 -2.904635e-04 0.003338620 4.7601280   1.934703e-06\n3 0.69235062 -8.956670e-04 0.345864093 1.1787856   2.384836e-01\n4 0.05590525 -3.884365e-04 0.029702941 0.3266329   7.439455e-01\n5 0.33277612 -3.884365e-04 0.004984321 4.7190630   2.369335e-06\n6 0.05909213 -4.231402e-05 0.001519106 1.5172126   1.292130e-01\n\n\nlocalmoran() function returns a matrix of values whose columns are:\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of local moran statistic under the randomisation hypothesis\nVar.Ii: the variance of local moran statistic under the randomisation hypothesis\nZ.Ii:the standard deviate of local moran statistic\nPr(): the p-value of local moran statistic\n\nMapping the local Moran’s |\n\nnga_wp.localMI <- cbind(nga_wp,localMI_dw) %>%\n  rename(Pr.Ii.nf = Pr.z....E.Ii..)\nnga_wp.localMI <- cbind(nga_wp.localMI,localMI_dw_FUN) %>%\n  rename(Pr.Ii.f = Pr.z....E.Ii..)\n\n\nMapping local Moran’s I value\nTo identify the outliers and clusters, we will filter all the areas which are not statistically significant.\n\nMoran_NF <- tm_shape(nga_wp.localMI) + \n  tm_fill(\"white\") +\n  tm_borders(\"grey\", lwd = 0.5, alpha = 0.5) +\n  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran I value for p < 0.05 (Non Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n  \n\nMoran_F <- tm_shape(nga_wp.localMI) + \n  tm_fill(\"white\") +\n  tm_borders(\"grey\", lwd = 0.5, alpha = 0.5) +\n  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +\n  tm_fill(col = \"Ii.1\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran I value for p < 0.05 (Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n\ntmap_arrange(Moran_NF, Moran_F, asp = 1, ncol = 2)\n\n\n\n\n\n\nMapping local Moran’s I p-values\n\np_value_nf <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii.nf\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\",\n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value (Non-Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n\n\np_value_f <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii.f\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Greens\",\n          title = \"local Moran's I p-values\" ) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value (Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n\ntmap_arrange(p_value_nf, p_value_f, asp=1, ncol=2)\n\n\n\n\n\n\nMapping both local Moran’s I values and p-values\n\nMoran_NF <- tm_shape(nga_wp.localMI) + \n  tm_fill(\"white\") +\n  tm_borders(\"grey\", lwd = 0.5, alpha = 0.5) +\n  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran I value for p < 0.05 (Non Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n  \n\nMoran_F <- tm_shape(nga_wp.localMI) + \n  tm_fill(\"white\") +\n  tm_borders(\"grey\", lwd = 0.5, alpha = 0.5) +\n  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +\n  tm_fill(col = \"Ii.1\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Local Moran I value for p < 0.05 (Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n\np_value_nf <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii.nf\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\",\n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value (Non-Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\n\n\np_value_f <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii.f\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Greens\",\n          title = \"local Moran's I p-values\" ) +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"P-value (Functional)\",\n            main.title.size = 0.7,\n            main.title.fontface = \"bold\",\n            title = \"Fixed Distance Weight\",\n            title.size = 0.6,\n            legend.height = 0.25,\n            legend.width = 0.35)\ntmap_arrange(Moran_NF, Moran_F, p_value_nf, p_value_f, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "href": "Take-home_Ex1/Take-home_Ex1.html#creating-a-lisa-cluster-map",
    "title": "Take home Exercise 1",
    "section": "Creating a LISA Cluster Map",
    "text": "Creating a LISA Cluster Map\n\nPlotting Moran scatterplot\n\nnci <- moran.plot(nga_wp$`wpt non-functional`, wm73_lw,\n                  labels=as.character(nga_wp$ADM2_EN), \n                  xlab=\"Non Functional Water Point\", \n                  ylab=\"Spatially Lag Non Funtional Water Point\")\n\n\n\n\n\nnci1 <- moran.plot(nga_wp$`wpt functional`, wm73_lw,\n                  labels=as.character(nga_wp$ADM2_EN), \n                  xlab=\"Functional Water Point\", \n                  ylab=\"Spatially Lag Funtional Water Point\")\n\n\n\n\n\n\nPreparing LISA map classes\n\nnga_wp$Z.nonfunc <- scale(nga_wp$`wpt non-functional`) %>% \n  as.vector \nnga_wp$Z.Func <- scale(nga_wp$`wpt functional`)%>%\n  as.vector\n\n\nnci2 <- moran.plot(nga_wp$Z.nonfunc, wm73_lw,\n                   labels=as.character(nga_wp$ADM2_EN),\n                   xlab=\"z-Non-functional Water Point\", \n                   ylab=\"Spatially Lag z-Non-functional Water Point\")\n\n\n\n\n\nnci3 <- moran.plot(nga_wp$Z.Fun, wm73_lw,\n                  labels=as.character(nga_wp$ADM2_EN), \n                  xlab=\"z-Functional Water Point\", \n                  ylab=\"Spatially Lag Funtional Water Point\")\n\n\n\n\nThe code chunks below show the steps to prepare a LISA cluster map.\n\nquadrant <- vector(mode=\"numeric\",length=nrow(localMI_dw))\n\n\nquadrant2 <- vector(mode=\"numeric\",length=nrow(localMI_dw_FUN))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#scale-waterpoint",
    "href": "Take-home_Ex1/Take-home_Ex1.html#scale-waterpoint",
    "title": "Take home Exercise 1",
    "section": "scale waterpoint",
    "text": "scale waterpoint\n\nDV <- scale(nga_wp.localMI$wpt.non.functional)\nDV_Fun <- scale(nga_wp.localMI$wpt.functional)  \n\nFinding the lag of the scaled percentage of functional and non-functional water point.\n\nC_mI <- lag.listw(wm73_lw, DV)\nC_mI_Fun <- lag.listw(wm73_lw, DV_Fun)\n\nMaking use of Moran Scatterplot below, we filter all the area with p-value<0.05 and identify significant areas.\n\nMIplot <- data.frame(cbind(DV,C_mI,localMI_dw[,5]))\nMIplot <- MIplot %>%\n  filter (X3 < 0.05)\nplot(x = MIplot$X1, y = MIplot$X2, main = \"Moran Scatterplot Fixed Distance\", xlab = \"scaled Non-Functional (%)\", ylab = \"Lag scaled Non-Functional (%)\")\nabline(h = 0, v = 0)\n\n\n\n\n\nMIplot <- data.frame(cbind(DV_Fun,C_mI,localMI_dw[,5]))\nMIplot <- MIplot %>%\n  filter (X3 < 0.05)\nplot(x = MIplot$X1, y = MIplot$X2, main = \"Moran Scatterplot Fixed Distance\", xlab = \"scaled Functional (%)\", ylab = \"Lag scaled Functional (%)\")\nabline(h = 0, v = 0)\n\n\n\n\n\nsignif <- 0.05 \nquadrant[DV >0 & C_mI>0] <- 4      \nquadrant[DV <0 & C_mI<0] <- 1      \nquadrant[DV <0 & C_mI>0] <- 2\nquadrant[DV >0 & C_mI<0] <- 3\nquadrant[localMI_dw[,5]>signif] <- 0\n#nga_wp.localMI$quadrant <- quadrant\n\n#quadrant2[DV_Fun >0 & C_mI>0] <- 4      \n#quadrant2[DV_Fun <0 & C_mI<0] <- 1      \n#quadrant2[DV_Fun <0 & C_mI>0] <- 2\n#quadrant2[DV_Fun >0 & C_mI<0] <- 3\n#quadrant2[localMI_dw[,5]>signif] <- 0\n#nga_wp.localMI$quadrantfun <- quadrant2"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map",
    "href": "Take-home_Ex1/Take-home_Ex1.html#plotting-lisa-map",
    "title": "Take home Exercise 1",
    "section": "Plotting Lisa map",
    "text": "Plotting Lisa map\n\n#nga_wp.localMI$quadrant <- quadrant\n#colors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\n#clusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n#\n#tm_shape(nga_wp.localMI) +\n#  tm_fill(col = \"quadrant\", \n#          style = \"cat\", \n#          palette = colors[c(sort(unique(quadrant)))+1], \n#          labels = clusters[c(sort(unique(quadrant)))+1],\n#         popup.vars = c(\"\")) +\n#  tm_view(set.zoom.limits = c(11,17)) +\n#  tm_borders(alpha=0.5)\n\n\n#nga_wp.localMI$quadrantfun <- quadrant\n#colors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\n#clusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\n#tm_shape(nga_wp.localMI) +\n#  tm_fill(col = \"quadrantfun\", \n#          style = \"cat\", \n#          palette = colors[c(sort(unique(quadrant2)))+1], \n#          labels = clusters[c(sort(unique(quadrant2)))+1],\n#          popup.vars = c(\"\")) +\n#  tm_view(set.zoom.limits = c(11,17)) +\n#  tm_borders(alpha=0.5)\n\nFor effective interpretation, it is better to plot both the local Moran’s I values map and its corresponding p-values map next to each other.\n\nWater_Point <- qtm(nga_wp, \"wpt non-functional\") +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) + \n  tm_layout(legend.height = 0.25,\n            legend.width = 0.35,\n            main.title = \"Number of non-functional water point\",\n            main.title.size = 0.7,main.title.fontface = \"bold\",\n            main.title.position = \"center\")\n\nnga_wp.localMI$quadrant <- quadrant\ncolors <- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters <- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5) + \n  tm_layout(legend.height = 0.25,\n            legend.width = 0.35,\n            main.title = \"LISA Map with Quadrant\",\n            main.title.size = 0.7,main.title.fontface = \"bold\",\n            main.title.position = \"center\")\n\ntmap_arrange(Water_Point, LISAmap, Moran_NF, p_value_nf, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-area-analysis",
    "href": "Take-home_Ex1/Take-home_Ex1.html#hot-spot-area-analysis",
    "title": "Take home Exercise 1",
    "section": "Hot spot Area Analysis",
    "text": "Hot spot Area Analysis\n\nComputing Gi statistics\n\n\nGi statistic using fixed distance\n\nfips <- order(nga_wp$ADM2_EN)\ngi.fixed <- localG(nga_wp$`wpt non-functional`,wm73_lw)\ngi.fixed\n\n  [1] -3.4117746649 -3.4325327295 -1.5896654726  0.1024035837 -1.4372020951\n  [6]  2.8392431096 -1.2451608781 -2.0881598529  0.7764312973 -4.0181176937\n [11] -3.5543643584  0.7028327021  1.0557642518 -1.2648020444 -3.1100102991\n [16]  4.4236791649  0.7253370351 -0.1170313444 -0.8468860707  0.1418378466\n [21] -0.4444525907 -2.5787439152 -5.9408386919  0.0490221299 -4.7228624357\n [26] -3.4526479798 -3.2842327545  2.6307586789  3.1531206419  3.9017827701\n [31] -0.3901172116 -2.0709442943 -0.1348087246  2.5315321685  0.5142842691\n [36]  2.8157847314  2.0572944746  2.3429395384  2.2901285343  1.9238345799\n [41]  2.1897325824 -0.3645157327 -3.8639919963  4.5399631849  4.3061500016\n [46]  2.9608766578 -0.2864102817  1.1746065746 -2.8181694612  3.0318488026\n [51] -2.3715234853 -5.9222618490 -4.8722620154 -5.9978486948 -2.1521995859\n [56] -2.6990377972 -4.0738422433 -4.2582561763  0.1434597247 -1.4480552039\n [61] -0.3664736626 -2.0660238126  1.3560050446  1.1941723552  0.6520255991\n [66] -0.7061126715  5.4047035766 -3.9654078235 -2.8742418968  4.4607142525\n [71]  6.0841484326  0.2440050847 -0.0717557313 -0.2146512615  1.2805963197\n [76]  2.5430378175 -4.3209911455 -6.1864779959 -6.3091804665 -5.2074212405\n [81]  1.7981357038 -3.0134148246 -1.6605766843  2.1372905711 -1.9370094219\n [86]  0.5351722462  0.7781339095 -0.0991617191  0.0206765657  1.6845537280\n [91] -1.9481984678  2.4106784274 -0.1209884988 -0.0294216102  1.2014584129\n [96]  0.5487724545  0.5230691396 -1.0049421880  2.2086577453  0.6860104564\n[101] -0.8358802808  3.3934885075 -2.5915246147  0.7361865356 -1.3919152488\n[106]  1.6857908883  3.3349825302  1.6221641794 -0.6649376028  0.1049808942\n[111]  0.1797402897 -0.2296312591  1.5924606930 -0.4220300892 -2.4843821512\n[116] -0.5403453732  2.4425124231  3.1901956500  3.7026209747  5.7708188247\n[121] -2.9992528883 -2.8867680713  0.1450845287  5.6210067488  0.1300463875\n[126] -1.4642795114  0.1064214435  0.2019905157 -0.3933126058 -1.0687092481\n[131]  1.1862683742 -1.2897330306  2.0774178384 -2.7261489805  1.1595913792\n[136]  0.0590529868  0.0415312576 -0.1479027888  0.2286220369 -1.8068739793\n[141]  1.8128875616 -1.8465165657 -1.9263347704 -0.1217435299  0.1562862363\n[146] -2.0483697898 -0.1728823598  1.1206769217  2.2828808379 -1.2897776976\n[151]  2.4167160591  0.3088772578 -0.1569586843  1.5067812784 -1.4232058416\n[156] -1.3192224285 -3.7789524190 -0.8757699225 -1.6603243945 -2.5183861649\n[161]  0.0497131757  0.5395983509  2.4584177542  1.7817721289 -5.8940988934\n[166]  0.5616363675  1.6014174947 -0.7737526146 -1.8608470741  1.2807175799\n[171]  1.8546118600  5.6507070121  4.9899574161  4.0337243331  5.4648235612\n[176] -0.6763153032 -2.1820247405  1.1201091686  5.1574644542 -1.0998628514\n[181] -4.9652045029  3.5387758960 -2.3886751887 -0.4653196107  4.1348276862\n[186]  3.5932572298  3.8543059497  5.2228382133 -5.6296206205 -2.9973115744\n[191] -3.9852174640  3.5127403382 -2.4310631930 -2.9651910898 -3.2384084218\n[196] -3.0486056593 -2.0595597139 -2.5844113063 -3.5641507085 -1.6850334842\n[201]  0.3786055236 -0.5079560968 -1.9294510731 -3.7986404726 -2.7848792901\n[206] -2.5102897931 -1.9939528637 -2.3691669213 -0.9886885003 -2.0151263289\n[211] -0.8292832587 -0.5086561528  3.5470212834 -2.4231288260 -5.6010575750\n[216] -4.0100196603  0.3576511087  0.2927426140 -1.6443111430  0.8302229411\n[221] -0.5062515700 -0.1547202287 -2.4843821512  1.0086589118 -2.1770380403\n[226]  2.4626146208  0.0440638219  0.1920286012  1.3983932449 -0.8496076016\n[231] -0.6691384516 -1.2911170263  1.5345894073 -0.5529326952 -1.5457781106\n[236] -1.0324483227  1.1200463362 -0.0620637069  0.4247713032  2.0054718680\n[241] -1.8702382558 -1.1521974135 -0.2921554734 -2.4950665627  3.5976949011\n[246] -2.7962939270  4.8434048492 -2.5148770948 -1.1267981706 -2.4941996452\n[251] -0.2630217751 -2.1970004876 -0.7730147072  0.6798537235  1.2492399224\n[256] -0.6888953395  0.8358603199  1.6654804315 -0.4827650151 -0.5433051006\n[261] -2.7605516416 -0.8707537202  0.0947302301 -2.0368588754  0.0696307201\n[266] -0.6203604939 -2.3237912877  0.3598097208  0.3526946680  1.4430576168\n[271] -1.8702382558 -0.1272890978 -2.2962397403 -2.7219828700  0.2521141177\n[276]  0.2110907859 -0.0140816269 -0.4035735646 -0.1738442235 -3.4726936093\n[281] -1.1266733840 -1.0891489463 -0.8054781266 -3.0162049305 -0.2258676440\n[286] -0.4264717884  1.5869426397 -0.6349762230 -1.8844344179  2.7723932054\n[291] -5.6754076087 -5.4830137576 -5.5819971667 -5.6384828208 -0.5824687042\n[296]  5.3088751125 -2.6487517374  5.7569471808  4.9440575555  3.7543412120\n[301]  4.2490060765  6.6608670387  3.7340891879  4.3840930783  4.6799452358\n[306] -2.6462032630  4.3397784922 -2.4054408070 -3.4238843779 -2.5120530221\n[311] -2.9450547146 -2.6317957384 -5.5019990473 -4.2726521346  1.3083580350\n[316] -0.0008175288 -0.5453801285 -1.9627769253  4.7484630417  2.6229111706\n[321] -2.4559271695 -3.2713201180 -2.9903547011  1.6380043965 -4.6631468209\n[326] -2.3492073446 -3.3004858380  4.2761022253  4.0780178934  3.5616720390\n[331] -1.2136320131 -2.7979941928 -2.0118940444 -1.4294099325 -2.2358982231\n[336] -3.8595215527  2.0820588544 -2.6099148033  6.7003704884  1.0903162691\n[341]  4.4835629508  6.0629547434  6.0427221000  5.9029000493 -1.0477720725\n[346]  6.6228782572  4.9953238917  5.1302151080  0.5368152260  1.0651968009\n[351] -0.8283153141 -2.4311349096  1.0360845873  0.3745724752  5.5209564889\n[356]  5.4927540484  5.2676551986  2.0959129929 -0.6275540802  4.1792561383\n[361] -0.0590747566 -1.4318034953 -1.8389648967 -3.6800688787 -3.6682275406\n[366] -5.4245454867  5.5110103591 -4.6407938228  1.6117911279 -2.6522843897\n[371] -2.9391365455 -5.4894734274  0.8980569535  0.1738054683 -0.1017873640\n[376] -2.9644127980 -0.3483319452  2.5906642146  2.5140183428  2.8049352195\n[381] -1.8542483216  0.4788736337  0.3119912756  0.9113252618 -1.0636046195\n[386]  1.2128128576  2.3166975797 -2.4409676368  1.3341470252  1.2361156601\n[391]  2.1848914329  1.9356540658  1.1829505160 -2.1398569553  1.5986911707\n[396]  3.5405748932  4.2315968938  1.4478008085  0.7997941089 -2.4579198656\n[401]  1.7729143861 -0.2688161324  1.1759997435 -0.4785272245  0.0824185174\n[406] -1.9481984678  1.8474148195  2.0216768147  0.6370561918 -1.0801487314\n[411]  1.8849519770 -0.4439225392 -2.1627301474 -0.9568239420 -2.1208906249\n[416]  1.9959594097  1.8550481979  0.0768132901  0.6124793401  1.3560776058\n[421]  2.3411474563  1.5216483269  2.8604474525 -0.5765991732  1.1856817116\n[426]  0.8683211225  0.9184331234  1.0249162410  1.3154778076 -2.2722342410\n[431] -0.7116331447  2.1453405077  0.6730570517 -1.1800027342 -0.5199578683\n[436]  0.4808652570 -0.0235257009  0.8165479237 -3.1574104436 -2.0225625108\n[441]  2.9455769746  0.2363832344 -2.2768267875  0.3466223084  3.2255102937\n[446]  0.1411952313 -1.9481984678 -2.1661859263 -0.4676066168 -1.6782098794\n[451] -0.0777842289  1.4868205720 -0.3505589498 -0.1726887164  3.5929560597\n[456]  2.7346136617 -0.9465537461 -0.8931548108  1.3012749110  1.5028765507\n[461] -2.2932985630 -2.2505626380  0.7936258264  2.4032040546  2.3557037349\n[466]  0.1826814641  0.1072325498  1.2844732698 -0.8760327358  1.7752129147\n[471]  0.2516184985  1.2342409373 -2.0753935530 -1.8558057677 -2.5640880571\n[476] -0.2895493962 -2.0222513579  1.9291991379 -2.0461307940  1.7044807663\n[481] -2.1018239835  2.2216843179 -0.0429522457  0.4370541700  1.2654796893\n[486] -0.8407609199  2.3444744249  1.3973854719 -1.0153143497  0.3214749983\n[491]  2.0826454414 -2.2510480140 -0.9777552530 -0.2462903412  1.3294858918\n[496] -1.1545484236 -1.5476742545 -5.2094566914  0.0549402737 -2.6381224548\n[501]  1.2684806683  3.0942547654 -0.1945298933 -0.3139665937 -1.4312402705\n[506]  6.0035680834 -1.5896654726  1.7438033643 -2.7605516416  3.6248484270\n[511]  3.2842322630 -2.5504783218 -2.2884473891 -1.2742029215 -2.1794770390\n[516] -0.9452868662  0.9226508131 -0.2808815183 -1.6037058129  0.1028146689\n[521]  0.7903470822 -4.6570747509 -4.0599839099 -2.8929329559 -2.2510480140\n[526] -2.5436200487  0.5572826624 -4.0077436082  0.5743933705  0.7561771796\n[531] -5.4711387856 -5.9881769115 -1.7097095914 -3.2145613317 -5.4921528592\n[536] -5.6065224752 -5.8927691095 -0.5158206706 -0.6169568186 -0.3646687228\n[541] -3.1236269572 -0.6335776619 -5.6752500750 -2.8447151168  3.1510854408\n[546]  0.8119571110  1.5362711705 -3.3968533218 -3.8153771055  5.9423980975\n[551] -1.9815928102 -3.8748698800  2.7449840241  3.5912450649 -1.5471567880\n[556]  1.1545459720  4.7634173376 -3.1812422270 -0.1539058338  5.4349953766\n[561] -1.4215986299 -4.1250618121 -2.1372786039 -5.4053629216 -3.3734475553\n[566]  3.1128103289  3.1166665383  2.8896814604  3.1830364814  2.1415338074\n[571] -2.6827643843  1.3599575208 -5.4155248133 -0.3658278560 -4.8168371931\n[576] -1.0570272459 -0.2384946211 -1.1607522581 -5.6452073745 -2.2576555531\n[581]  1.7975786222  4.6952651933  1.4302665280  1.3989314523 -5.1854062529\n[586]  1.4247697913 -0.2318308926 -2.7751843183 -1.2798894874 -3.2243185582\n[591]  3.7238463041 -1.9040602801  5.3597510246  0.3377758326 -0.6590453290\n[596]  0.5564706605 -3.6996922635  0.2560104627  4.2395964721  3.9849392428\n[601] -0.7367636763 -5.4524005156 -5.3185082518 -0.8488602190 -1.9028377268\n[606] -1.0064673530 -0.3045753085 -2.8225903216  2.5443505078  4.6715435317\n[611] -5.7372577835  5.3162941702  0.0533854848 -5.5653175208 -5.3526110614\n[616] -5.3342170944 -2.0355539983 -6.1834676902 -5.6475542692  1.4165917345\n[621] -4.8095950608 -5.3585676554 -2.4123005609 -3.7450127301  5.5704091882\n[626] -0.4207639553  0.0604872651  0.4913428569  1.1882731016  1.0669220785\n[631] -4.3830103212 -4.0535150724 -4.2297431678  2.9774246125  4.2206187107\n[636] -5.8592562511 -2.6995188099  1.2724261692 -0.0111640361  4.9598342782\n[641] -0.8975285513  3.2695447281 -3.3804769565  1.0233101789 -3.3797348722\n[646]  0.6090977147  2.5796056761 -1.1786140304 -0.0727091531 -0.8216517560\n[651] -2.6810951026  0.2470088329  1.2742462639 -1.9488365342  1.0167687803\n[656]  2.4696394873  0.9420722071  0.4885664676  3.1287725372 -0.9497319744\n[661]  2.4425891604 -0.2105136963 -3.5070892894  0.8476063553 -0.4188028499\n[666] -0.1801619339  2.1839721672  2.9349648477 -2.3517158696  0.6303115465\n[671] -2.9357371560 -0.3251973156  0.5816313363 -0.3216700089 -1.9738302057\n[676] -2.4477520834  2.1462680474 -0.7007776964 -0.2901563432 -0.6294507710\n[681]  3.1848222332 -2.2628381729 -0.1928257328  3.7543250494 -0.6898963477\n[686] -0.4579363450 -2.8263574815 -1.9107113505  1.9767736485  1.3356841113\n[691] -0.1992862573  2.1555107134 -2.1759945372  3.8196059687  1.3667153170\n[696]  1.5606747950 -2.8176961202  0.1258362477  1.6362250633 -1.1755606793\n[701]  0.0556083826 -0.6254612030 -1.8245553490  1.7673690255 -1.7099082238\n[706]  0.3279568070 -1.8322536644 -0.4720914115  1.2302888089 -0.2537342611\n[711] -1.0194530184 -1.4775673577 -0.0896050089 -1.1801300237 -2.3509568161\n[716] -4.6307512034 -2.7407326147 -0.0025370071 -3.0988099215 -3.1167461569\n[721] -3.4662013761 -1.4743456301 -1.9718471619  2.1607674145 -2.9379730339\n[726] -3.3579719453 -3.6200569828 -4.8364896839 -3.6643604569 -3.4079170777\n[731] -1.6811842118 -5.4597614286  0.0712972970 -0.1507192365  2.3528477525\n[736]  1.8167556955 -2.5958296857 -0.4791719568 -3.9373952476  4.0454927846\n[741] -0.8497222111  4.1914248594 -1.3905853881 -1.1087182179 -1.6883448834\n[746] -2.6117513854 -2.7085894788  0.0867810375  1.8316046394 -1.3189997474\n[751]  0.6456167365 -0.8342620760 -0.2755550651 -0.1319774555  3.8329382654\n[756]  3.9433436976  1.4629084755  2.5181371643  2.4671867473  1.4737976377\n[761]  1.0618293805 -3.2385810885 -2.9516603752 -2.9891644936  0.2150638765\n[766] -1.2461555271 -0.1547825213  0.7644963108  2.3956916991  3.1096694186\n[771]  3.4527292514 -0.9854012267 -1.0503779238  0.1911170626\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  High\n [16] High Low  High Low  High High Low  Low  High Low  Low  Low  High High High\n [31] Low  Low  Low  High High High Low  High High High High High Low  Low  Low \n [46] High High High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  High Low  High Low  High Low  Low  High High Low  High Low  High\n [76] Low  Low  Low  Low  Low  High High High Low  High Low  Low  Low  High High\n [91] Low  High High High High High High Low  High Low  Low  High Low  High High\n[106] Low  High High High High Low  High Low  Low  Low  High Low  High High High\n[121] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  High Low  High\n[136] Low  High Low  High Low  Low  High Low  High High Low  Low  High High Low \n[151] Low  High Low  High High Low  Low  High Low  Low  High Low  High High Low \n[166] Low  Low  High Low  Low  High High Low  High Low  Low  Low  Low  High Low \n[181] Low  High Low  Low  High Low  High High Low  Low  Low  Low  Low  Low  Low \n[196] High Low  Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  Low \n[211] Low  Low  High Low  Low  Low  High High Low  Low  High Low  Low  High Low \n[226] Low  Low  Low  Low  High Low  Low  High Low  High High High Low  High High\n[241] Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low  High High\n[256] Low  Low  Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[271] Low  High Low  Low  Low  High Low  Low  Low  Low  High Low  High High Low \n[286] Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low  High High High\n[301] High Low  High High High Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  High High High\n[331] Low  High Low  Low  Low  Low  High High High Low  High Low  High High High\n[346] Low  Low  High Low  Low  Low  Low  High Low  High High Low  High Low  Low \n[361] Low  High High Low  Low  Low  High Low  High Low  Low  Low  Low  Low  High\n[376] Low  High High Low  High Low  Low  Low  High Low  High High Low  Low  High\n[391] Low  High Low  Low  High High Low  Low  Low  Low  High High High High Low \n[406] Low  High High High Low  High Low  High Low  High High High Low  Low  High\n[421] High Low  High Low  High High Low  Low  Low  Low  Low  Low  High High High\n[436] High High High Low  Low  High Low  Low  Low  High High Low  Low  Low  High\n[451] High High Low  High High High High Low  High High Low  Low  Low  High Low \n[466] Low  High Low  High High Low  Low  Low  Low  Low  High Low  High Low  High\n[481] Low  High Low  Low  Low  Low  High High Low  High Low  Low  High Low  High\n[496] High Low  Low  Low  Low  Low  High Low  Low  High Low  Low  High Low  High\n[511] High Low  Low  Low  Low  High High Low  High High High High Low  Low  Low \n[526] Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  High\n[541] Low  Low  Low  Low  High High High High High High High Low  High High Low \n[556] High High Low  High High Low  Low  Low  Low  Low  Low  High High High Low \n[571] Low  Low  High Low  High High High Low  Low  Low  Low  High High High Low \n[586] High High Low  Low  Low  Low  Low  High Low  Low  Low  Low  High High High\n[601] High Low  Low  Low  Low  Low  Low  High Low  High Low  High Low  Low  Low \n[616] Low  High Low  Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[631] Low  Low  Low  High High Low  Low  Low  Low  High Low  High Low  High Low \n[646] Low  High Low  Low  Low  Low  High Low  Low  Low  High High High High High\n[661] Low  Low  High High Low  High High High Low  Low  High Low  High Low  Low \n[676] Low  High Low  High Low  High Low  Low  High Low  Low  Low  Low  High Low \n[691] High High Low  High Low  Low  Low  High High High High Low  Low  High Low \n[706] High Low  Low  High Low  High High High High Low  Low  Low  High Low  Low \n[721] High Low  Low  High High High Low  Low  Low  Low  Low  Low  Low  Low  High\n[736] High Low  High Low  High Low  High High Low  Low  Low  Low  High High Low \n[751] High Low  High High High High High High High Low  Low  Low  Low  Low  High\n[766] Low  Low  High Low  Low  High High High Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt non-functional`, listw = wm73_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nfips <- order(nga_wp$ADM2_EN)\ngi.fixed_fun <- localG(nga_wp$`wpt functional`,wm73_lw)\ngi.fixed_fun\n\n  [1] -4.796625452 -4.760127962 -1.178785579 -0.326632935 -4.719062957\n  [6]  1.517212583 -1.636993159 -1.695772874 -0.420397967 -5.123902136\n [11] -2.471730819 -0.360194196 -1.160778305 -1.048919594 -2.076653373\n [16] -0.319638712  0.024689628 -1.279528653 -2.184358587  0.671272845\n [21] -1.467560160 -2.129890631 -5.395088806 -0.580180689 -5.458181765\n [26] -2.856737649 -2.398488558  0.047876305  0.553566085 -0.678752505\n [31] -1.789058701 -1.699530361  7.316382777 -0.942117552 -0.276601541\n [36]  0.968416640 -1.200000231 -1.215937811 -1.188665575 -0.936269120\n [41] -0.910234791 -2.557053584 -2.572245517 -0.245002701 -0.469438413\n [46]  0.825048029  5.756223602 -0.421474825 -2.324341929  0.510629133\n [51] -1.821113251 -4.952010761 -4.317238032 -5.375838607 -3.325401823\n [56] -2.969247964 -3.970558940 -4.171384714  0.537673286 -2.373367425\n [61] -1.782872370 -1.690458718  0.473188658  0.020869639 -0.415531935\n [66] -3.067787075  2.036615562 -3.388560862 -2.035881783  0.530433344\n [71]  0.914653521  0.353267344 -0.067751286 -0.717387481 11.826518178\n [76]  0.262941721 -3.986267972 -5.146568258 -5.390420086 -4.411184786\n [81]  7.772507964 -1.870888986  2.675295892 -0.649933863  3.530210517\n [86] -2.247765303  1.959302045 -0.015345175 -0.190454738  0.454287567\n [91] -1.444648763  0.405372773 -0.527594795 -1.272494469  2.337994156\n [96]  3.059431706  2.564387687  1.378633502  6.979930628  0.001564852\n[101]  3.806723860  1.323933872 -3.925948341 -1.551585805  4.530615529\n[106]  0.622169130  1.408970398  3.598293395 -1.068989857  9.734034046\n[111]  6.482245919 -0.708388269 -0.283322572  1.623796935 -1.411235908\n[116] -1.019433470  2.652150834 -0.026674040  1.210758111  1.020998329\n[121] -2.973029029 -3.232857918 -0.041267240  1.211942987 -0.136961972\n[126] -1.440738782  5.784211632  0.064853642  0.895275119  4.981130457\n[131] -0.411512020  0.325452007  0.172847407 -2.700297960 -0.112748651\n[136] -2.858250519 -2.838335027 -0.031623823  3.140725380 -1.193741467\n[141]  0.522647406  4.508306655 -1.154123902  0.704778882  7.244848174\n[146] -1.322736593  3.838917300 -0.586271732  2.749348898 -1.062816081\n[151]  3.437193610 -0.281080288  1.432006743  3.624933666  5.219108034\n[156]  4.356464086 -3.061522216 -1.737462126 -1.433320898 -1.867460383\n[161]  2.021045256 -1.079001217  0.339194758 -0.447683844 -5.194088009\n[166]  7.760826012  3.612672340  2.401521545 -3.932711535  0.664912955\n[171]  1.512273278  0.938478908  0.877369107  2.096223899  0.162107516\n[176] -0.780169159 -1.776622291 -0.232742053  1.149261320 -1.958249110\n[181] -5.336864791  0.487651859 -2.222023494 -3.701647793 -0.049111229\n[186] -1.027213498 -0.293338282 -0.018656587 -5.109795341 -3.712594415\n[191] -3.370303729 -0.733587774 -2.131616581 -2.547908717 -2.918359053\n[196] -2.274341511 -2.736576378 -2.864461007 -3.383692993 -2.479993304\n[201] -1.333668024 -3.391773644 -4.825810986 -4.606650954 -3.175497220\n[206] -2.867346895 -1.804087100 -4.739652812 -4.267580760 -2.738349519\n[211] -2.258206165 -2.345152724  0.825138188 -2.038318349 -4.763993663\n[216] -5.218542497 -0.533951036 -0.772989095  4.557586316 -0.694389743\n[221]  1.278381807 -0.756156627 -1.656765229 -1.005568662 -0.896133518\n[226]  2.809332022  8.354696578 -0.758299913 11.681333158  3.960443970\n[231]  1.395070355 -0.913989702  9.627442737  4.464755359  3.564663269\n[236] -1.019280116  1.193759164  7.337585009  0.658425019  0.197956077\n[241] -1.180478137  6.575205038  2.118679253 -1.651707593  3.025034229\n[246] -3.753207455  1.048332054 -1.377765271 -0.894505578 -1.828697041\n[251] -0.796121151 -0.988626661 -0.858111837 -0.663893717 12.608127293\n[256] -0.771550024 -0.597118254  9.121334761  1.119804276 -0.288001999\n[261] -2.047033493 -1.172374899 -0.501966928  4.111155011 -0.716706941\n[266]  2.382601004  3.193389546  0.362312513 -0.959050742  5.031261684\n[271] -1.337552563 11.576955247 -1.028792533 -1.787378470 -0.470180105\n[276] -0.502208652 -0.652681839 -0.853539673 -0.789102889 -3.261683102\n[281] -0.967771709 -1.226585251 -0.811129233 -1.989680628 -3.210784851\n[286] -4.155345305  0.083233454 -4.196967277 -2.319192417 -0.923663708\n[291] -5.254437866 -5.233489238 -5.022486870 -4.990068236 -1.191126097\n[296]  0.130496233 -2.086680957  1.024478184  0.866892685  0.184191908\n[301]  0.086049850  0.910955413 -0.507539834  0.555528771  1.139116792\n[306] -2.141361286  2.187696902 -2.716023426 -3.145170658 -2.768852333\n[311] -3.086853736 -2.767284563 -5.045242255 -5.133156795 -1.210258524\n[316] -1.061349688 -1.335899179 -1.974849295  0.049399810 -0.831074214\n[321] -4.620239878 -3.450328584 -3.254580827  2.890974503 -5.162884377\n[326] -1.924517173 -2.401959634 -0.270685936 -0.582886865  1.123837553\n[331] -4.543179697 -2.211761815 -4.193800219 -4.400013599 -2.454835521\n[336] -3.943577590  0.608915921 -4.859336908  1.424289319 -1.171354641\n[341]  0.150724307  0.455738714  0.901511376  1.052765164 -1.060399635\n[346]  2.255010806  1.391019329  1.495476178 -0.075388339  4.187221209\n[351] -3.851821661 -1.749320356 -1.245802098 -0.021632801  0.930382428\n[356]  1.365480441 -0.018931327  0.005817083 -0.168563045 -0.485986137\n[361] -0.484249142 -1.417805617 -1.515965814 -4.914104859 -5.143307375\n[366] -5.590074894  0.757413608 -4.659669116 -0.173435639 -2.930649869\n[371] -2.938433264 -5.257577674  7.023817384 -0.271167944 -4.007786754\n[376] -3.560458147 -0.545226216  0.348443768  1.397742193  2.228234375\n[381] -1.212173377 10.838099292  4.371615765  0.358111148  4.909400053\n[386] -0.394511268  1.699144153 -1.332539251  2.778761672  1.367938928\n[391]  1.320968959  1.551561688 -1.048588108  3.837240499  1.584691637\n[396]  1.115839697  0.639524891 11.470507367  3.421581590 -1.618267467\n[401]  0.213636057 -0.459527822  1.705318137 -0.705319616  3.071688138\n[406] -1.444648763 -0.078634839  0.098406863  1.537395142  2.804091023\n[411]  2.309925920  3.427154442  3.965427065  3.952811115  3.072023737\n[416]  0.726832712  0.132805960  3.570025169  0.941352179  2.711444669\n[421] -0.316905589 11.233904555  1.683157859  0.728690673  2.651708893\n[426]  5.913916298  0.160263416 -0.523765424  0.423539121 -4.036772436\n[431]  4.170377169  0.108858481 10.668447414  2.636073077  7.034217507\n[436] -0.281880919 -0.840855141  0.517222625 -2.877969182 -0.964731329\n[441]  0.913504498 -0.543487200 -1.904511471  2.394610100  3.031288248\n[446] -0.340552895 -1.444648763  4.113454879  5.633695682  4.386881730\n[451]  3.020799932  0.273621954  3.934527167 -0.691096555  0.017396541\n[456]  0.009168543 -1.351386142 -0.802780323  0.158640466 -0.124417745\n[461] -1.905751410 -1.912332128  0.116134126  1.290096633  0.902548864\n[466] -0.669277435 -0.217957776  1.091254914  3.348737032 -0.114691377\n[471] -0.856100785  9.760066190 -1.396983244  3.471012235 -1.439260520\n[476] -0.752254689 -0.964492350  3.133094811 -1.393075179 11.948654838\n[481] -1.501515087 -0.409336688  6.072071581 -0.965177123 12.913447102\n[486]  3.233374934  1.078250239  3.671335818  0.461306989 -0.093857516\n[491]  3.206315280 -1.669220966 -0.413175040 -0.273174855  2.562061728\n[496]  3.391949313 -1.217187644 -5.280562950 -2.913323179 -1.869068047\n[501] 12.064659197  1.680179622  6.564044722  0.576123433 -4.314693740\n[506]  0.629795831 -1.178785579  1.492122521 -2.047033493 -0.082337499\n[511]  1.554329806 -1.728352594 -1.518590300  3.316965071 -1.804856692\n[516] -0.583244682 -0.906380264  0.450314370  5.031903482 -0.667446407\n[521]  0.422279063 -4.253604539 -3.771714953 -2.380037977 -1.669220966\n[526] -1.415829273 -0.641250019 -4.851016718  6.211651959  3.938191286\n[531] -5.195686970 -5.139598941 -1.756215464 -2.882285526 -5.245338863\n[536] -5.071953823 -5.286543500 -3.716139511 -4.328454710 -3.854149448\n[541] -3.027582794 -0.284900738 -5.352070257 -2.270074902  0.133247051\n[546]  0.073992826  0.217852297 -4.874333782 -3.753213232  0.985441134\n[551] -4.718481286 -5.211656303  0.950499332  0.517108316 -1.869664783\n[556] -1.146531548  1.117959037 -2.271157832 -3.543739104  1.681084059\n[561] -2.310126370 -3.937355743 -2.316417257 -4.916239685 -2.772400468\n[566]  1.236671591  1.308223614  0.828620928  1.323539884 -1.071737798\n[571] -3.497359599 -1.215096208 -4.903159741 -2.348748787 -4.806522801\n[576] -1.938484036 -0.072570764 -1.535446830 -4.981964770 -1.613906573\n[581]  0.147102299  0.364812306 -0.928180477 -1.247173587 -5.138549655\n[586] -1.207094418 -3.417372903 -3.080764397 -1.281221193 -3.616303055\n[591]  0.747655733 -2.695619973  1.372386391  0.256835839 -1.464872920\n[596] -1.138292853 -4.632880375 -0.547087849 -0.170421337 -0.320898276\n[601] -1.539901265 -5.041257274 -4.949977276 -3.919692587 -3.633383487\n[606] -2.015060482 -0.053057022 -3.058184167  0.843561948 -0.080415730\n[611] -5.286374412  1.448806166 -3.093782525 -5.184191438 -5.082562771\n[616] -5.056914979 -4.580323409 -5.349243157 -5.211957343 -1.030740355\n[621] -4.442438142 -4.891078483 -1.905089871 -4.795083541  1.063327170\n[626] -0.933521080 -1.578270850 -1.578334320 -1.498577113 -1.373906347\n[631] -4.946643305 -4.880382733 -4.704975190 -0.650212735 -0.426436675\n[636] -5.130487789 -4.203410114  0.195737329  0.119850186  1.479392840\n[641] -0.635906805  1.909771456 -3.044687684  0.353207517 -3.829186494\n[646]  0.418824207  0.765475902 -0.906961587  0.028979705  4.388939152\n[651] -2.134547844 -0.456914208  3.153506676  3.576618272  9.930828226\n[656]  1.695982298  3.056510198  5.529311522  2.516549120 -0.337972241\n[661]  2.646170360  1.997954458 -3.166389295  0.022313786 -0.419392738\n[666] -0.342921112  5.299017107  1.625515929 -2.674159065  0.130543877\n[671] -2.178329186 -0.887675659 -0.563561615  0.063096291  3.556075691\n[676] -1.625979327  0.627332458 -0.201908284  3.900410812 -0.347418483\n[681]  0.942563138 -1.826892675 -1.112467595  2.186997876 -1.245330711\n[686] -1.190044003 -1.891662435 -2.105935630 10.350787059 -0.337105364\n[691]  3.598497939 -0.491822793 -1.901093612  1.200709980 -0.432468898\n[696]  2.497383872 -3.873362669  5.221825815 -0.308320259 -0.314178162\n[701] -0.473236569 -0.962888102  4.406659616 -0.360587467 -0.634760959\n[706] 12.532990190  3.923729833  1.181451124 -0.450717965 -0.418407023\n[711]  1.460055636  4.204376179  4.122884460 -0.521867733 -2.532490578\n[716] -3.992227392 -3.083281004 -2.932672169 -3.223978470 -3.183501018\n[721] -4.717349805 -2.466711855 -4.471958981  0.099389149 -4.657849068\n[726] -4.432996943 -3.504302818 -4.642299957 -4.873111351 -4.984575890\n[731]  4.409667716 -5.377716835 -3.806473939 -3.248909650  0.254710871\n[736] -0.108873831 -3.135488840 -4.259266866 -3.622987073  0.614108705\n[741] -1.157639496  1.254706976  5.595439342  1.987261504 -2.065484383\n[746] -2.692078268 -2.540128344 -0.174533571  0.590994961  4.932692386\n[751] -0.551209120 -1.015083034  0.695728059 -0.867531486  0.033480721\n[756]  0.332591811 -0.365589801  1.445315978  0.422824450  5.204034617\n[761] -0.382892599 -2.585082666 -2.027483188 -1.954050814 -0.206151257\n[766] -0.488255728  3.645713886  6.548154322  4.889046907  1.668672912\n[771]  1.937819738 -0.855511005  0.667817716  0.003316460\nattr(,\"cluster\")\n  [1] Low  Low  Low  Low  Low  High Low  High High Low  Low  Low  Low  Low  High\n [16] High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  High High High\n [31] Low  Low  High Low  High High Low  High High Low  High Low  Low  Low  Low \n [46] High High Low  High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n [61] Low  Low  High Low  High Low  High Low  Low  High High Low  Low  Low  High\n [76] Low  Low  Low  Low  Low  High High High High High Low  High High High High\n [91] Low  High High Low  Low  High High High High Low  High Low  Low  Low  High\n[106] High High High Low  High High Low  High High High Low  High High High Low \n[121] Low  Low  High High High Low  High Low  Low  High High High High Low  Low \n[136] Low  Low  Low  High Low  Low  High Low  Low  High Low  Low  Low  High Low \n[151] Low  Low  High Low  High High Low  Low  Low  Low  Low  Low  High Low  Low \n[166] High Low  High Low  High High High High High Low  Low  Low  Low  High Low \n[181] Low  High Low  Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[196] High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[211] Low  Low  Low  Low  Low  Low  High High Low  Low  High Low  Low  High Low \n[226] Low  High Low  High High High Low  High High High High High High High High\n[241] Low  High High Low  High Low  Low  Low  Low  Low  Low  Low  Low  Low  High\n[256] Low  Low  High Low  Low  Low  Low  Low  High High High Low  Low  Low  High\n[271] Low  High Low  Low  Low  High Low  Low  High Low  High Low  High Low  Low \n[286] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low \n[301] High Low  Low  High Low  Low  High Low  Low  Low  Low  Low  Low  Low  Low \n[316] Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low  Low \n[331] Low  High Low  Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low \n[346] High Low  High Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[361] Low  High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[376] Low  High High High Low  Low  High Low  Low  High High High High Low  Low \n[391] Low  Low  Low  Low  High Low  High High High Low  Low  High High High High\n[406] Low  Low  High High High High High High Low  Low  Low  High High Low  High\n[421] Low  High High High High High Low  Low  Low  Low  High Low  High High High\n[436] Low  Low  Low  Low  Low  High Low  Low  High Low  Low  Low  Low  High High\n[451] High High High High Low  Low  High Low  High Low  Low  Low  Low  High Low \n[466] High High Low  High Low  Low  Low  Low  High Low  Low  Low  High High High\n[481] Low  Low  High Low  High High High High Low  Low  High Low  High Low  Low \n[496] High Low  Low  Low  Low  Low  High High High Low  Low  Low  High Low  Low \n[511] High Low  Low  High Low  Low  High Low  Low  High High Low  Low  Low  Low \n[526] Low  Low  Low  High High Low  Low  Low  Low  Low  Low  Low  Low  Low  Low \n[541] Low  Low  Low  Low  Low  High Low  Low  High High Low  Low  High High Low \n[556] Low  High Low  Low  High Low  Low  Low  Low  Low  High Low  High High Low \n[571] Low  Low  Low  Low  High High High Low  Low  Low  High High Low  Low  Low \n[586] Low  Low  Low  Low  Low  High Low  High Low  Low  Low  Low  Low  Low  Low \n[601] High Low  Low  Low  Low  Low  Low  Low  High High Low  Low  Low  Low  Low \n[616] Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low  Low \n[631] Low  Low  Low  High Low  Low  Low  Low  Low  High Low  High Low  High High\n[646] Low  High Low  High High Low  Low  Low  High High High High High High Low \n[661] Low  High Low  High Low  Low  Low  High Low  Low  Low  Low  Low  Low  Low \n[676] Low  High High High High High Low  Low  High Low  Low  Low  Low  High Low \n[691] High Low  Low  High Low  High Low  High High High Low  Low  Low  High Low \n[706] High High High High Low  High High High Low  Low  Low  Low  Low  Low  Low \n[721] Low  Low  Low  Low  Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[736] High Low  Low  Low  Low  Low  Low  High High Low  Low  Low  High Low  High\n[751] High Low  High Low  Low  Low  High High High High Low  Low  Low  Low  High\n[766] Low  Low  High High High High High High Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = nga_wp$`wpt functional`, listw = wm73_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\n\nnga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\nnga_wp.gi_fun <- cbind(nga_wp, as.matrix(gi.fixed_fun)) %>%\n  rename(gstat_fixed_fun = as.matrix.gi.fixed_fun.)\n\n\nnonfunction <- qtm(nga_wp, \"wpt non-functional\")\n\n\nGimap <- tm_shape(nga_wp.gi) +\n  tm_fill(col = \"gstat_fixed\",\n          midpoint = 0,\n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(nonfunction, Gimap,  asp=1, ncol=2)\n\n\n\n\n\nfunctional <- qtm(nga_wp, \"wpt functional\")\n\n\nGimap_fun <- tm_shape(nga_wp.gi_fun) +\n  tm_fill(col = \"gstat_fixed_fun\",\n          midpoint = 0,\n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(functional, Gimap_fun,  asp=1, ncol=2)"
  }
]