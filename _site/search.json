[
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "href": "In-class_Ex2/In-class_Ex2.html#getting-started",
    "title": "In-class_Ex2",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\nIn this in-class data, two geospatial data sets will be used, they are:\ngeo_export\nnga_admbnda_adm2_osgod_20190417"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#importing-water-point-geospatial-data",
    "href": "In-class_Ex2/In-class_Ex2.html#importing-water-point-geospatial-data",
    "title": "In-class_Ex2",
    "section": "Importing water point geospatial data",
    "text": "Importing water point geospatial data\nFirst, we are going to import the water point geospatial data by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326)%>%\n  filter(clean_coun == \"Nigeria\")\n\nReading layer `geo_export' from data source \n  `C:\\eeveeishere\\ISSS624\\In-class_Ex2\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 406566 features and 72 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -92.05073 ymin: -27.31495 xmax: 92.32694 ymax: 26.65622\nGeodetic CRS:  WGS 84\n\n\nnext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\nNext, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)\n\nReading layer `nga_admbnda_adm2_osgof_20190417' from data source \n  `C:\\eeveeishere\\ISSS624\\In-class_Ex2\\geodata' using driver `ESRI Shapefile'\nSimple feature collection with 774 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2.668534 ymin: 4.273007 xmax: 14.67882 ymax: 13.89442\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "href": "In-class_Ex2/In-class_Ex2.html#data-wrangling",
    "title": "In-class_Ex2",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\")%>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#eda",
    "href": "In-class_Ex2/In-class_Ex2.html#eda",
    "title": "In-class_Ex2",
    "section": "EDA",
    "text": "EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\n\n\n\n                        status_cle frequency percentage cumulative_perc\n1                       Functional     45883      48.29           48.29\n2                   Non-Functional     29385      30.93           79.22\n3                          Unknown     10656      11.22           90.44\n4      Functional but needs repair      4579       4.82           95.26\n5 Non-Functional due to dry season      2403       2.53           97.79\n6        Functional but not in use      1686       1.77           99.56\n7         Abandoned/Decommissioned       234       0.25           99.81\n8                        Abandoned       175       0.18           99.99\n9 Non functional due to dry season         7       0.01          100.00\n\n\nExtracting funtional water point\nusing classes in status_cle field.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\n\n\n\n                   status_cle frequency percentage cumulative_perc\n1                  Functional     45883      87.99           87.99\n2 Functional but needs repair      4579       8.78           96.77\n3   Functional but not in use      1686       3.23          100.00\n\n\nSo all functional data will be called as wpt_functional.\nSimilarly for non-functional water point.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nExtracting water point with Unknown class.\nUsing filter() of dplyr to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "href": "In-class_Ex2/In-class_Ex2.html#performing-point-in-polygon-count",
    "title": "In-class_Ex2",
    "section": "Performing point in polygon count",
    "text": "Performing point in polygon count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nSaving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nNow I got the tidy sf data table and we will save the sf data table in rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "href": "In-class_Ex2/In-class_Ex2.html#visualising-the-spatial-distribution-of-water-points",
    "title": "In-class_Ex2",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\")\nwp_functional <- qtm(nga_wp, \"wpt functional\")\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\")\nunknown <- qtm(nga_wp, \"wpt unknown\")\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html",
    "href": "Take-home_Ex1/Take-home_Ex1.html",
    "title": "Take-home Exercise 1",
    "section": "",
    "text": "The specific tasks of this take-home exercise are as follows:\n\nUsing appropriate sf method, import the shapefile into R and save it in a simple feature data frame format. Note that there are three Projected Coordinate Systems of Nigeria, they are: EPSG: 26391, 26392, and 26303. You can use any one of them.\nUsing appropriate tidyr and dplyr methods, derive the proportion of functional and non-functional water point at LGA level.\nCombining the geospatial and aspatial data frame into simple feature data frame.\nPerforming outliers/clusters analysis by using appropriate local measures of spatial association methods.\nPerforming hotspot areas analysis by using appropriate local measures of spatial association methods.\n\n\n\n\nPlot maps to show the spatial distribution of functional and non-functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package.\n\n\n\n\n\nPlot hotspot areas and outliers/clusters maps of functional and non0functional water point rate at LGA level by using appropriate thematic mapping technique provided by tmap package."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#grading-criteria",
    "href": "Take-home_Ex1/Take-home_Ex1.html#grading-criteria",
    "title": "Take-home Exercise 1",
    "section": "Grading Criteria",
    "text": "Grading Criteria\nThis exercise will be graded by using the following criteria:\n\nGeospatial Data Wrangling (20 marks): This is an important aspect of geospatial analytics. You will be assessed on your ability to employ appropriate R functions from various R packages specifically designed for modern data science such as readr, tidyverse (tidyr, dplyr, ggplot2), sf just to mention a few of them, to perform the entire geospatial data wrangling processes, including. This is not limited to data import, data extraction, data cleaning and data transformation. Besides assessing your ability to use the R functions, this criterion also includes your ability to clean and derive appropriate variables to meet the analysis need. (Warning: All data are like vast grassland full of land mines. Your job is to clear those mines and not to step on them).\nGeospatial Analysis (30 marks): In this exercise, you are expected to use the appropriate thematic and analytics mapping techniques and R functions introduced in class to analysis the geospatial data prepared. You will be assessed on your ability to derive analytical maps by using appropriate rate mapping techniques.\nGeovisualisation (20 marks): In this section, you will be assessed on your ability to communicate the complex spatial statistics results in business friendly visual representations. This course is geospatial centric, hence, it is important for you to demonstrate your competency in using appropriate geovisualisation techniques to reveal and communicate the findings of your analysis.\nReproducibility (20 marks): This is an important learning outcome of this exercise. You will be assessed on your ability to provide a comprehensive documentation of the analysis procedures in the form of code chunks of Markdown. It is important to note that it is not enough by merely providing the code chunk without any explanation on the purpose and R function(s) used.\nBonus (10 marks): Demonstrate your ability to employ methods beyond what you had learned in class to gain insights from the data. The methods used must be geospatial in nature."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#submission-instructions",
    "href": "Take-home_Ex1/Take-home_Ex1.html#submission-instructions",
    "title": "Take-home Exercise 1",
    "section": "Submission Instructions",
    "text": "Submission Instructions\n\nThe write-up of the take-home exercise must be in Quarto html document format. You are required to publish the write-up on Netlify.\nThe R project of the take-home exercise must be pushed onto your Github repository.\nYou are required to provide the links to Netlify service of the take-home exercise write-up and github repository on eLearn."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#due-date",
    "href": "Take-home_Ex1/Take-home_Ex1.html#due-date",
    "title": "Take-home Exercise 1",
    "section": "Due Date",
    "text": "Due Date\n29th November 2022 (Tuesday), 11.59pm (midnight)."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#setting-the-scene",
    "href": "Take-home_Ex1/Take-home_Ex1.html#setting-the-scene",
    "title": "Take home Exercise 1",
    "section": "Setting the Scene",
    "text": "Setting the Scene\nWater is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.\nDeveloping countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.\nTo address the issue of providing clean and sustainable water supply to the rural community, a global Water Point Data Exchange (WPdx) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on WPDx Data Standard."
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "href": "Take-home_Ex1/Take-home_Ex1.html#getting-started",
    "title": "Take home Exercise 1",
    "section": "Getting Started",
    "text": "Getting Started\nIn the code chunk below, p_load() of pacman package is used to install and load the following R packages into R environment:\n\nsf,\ntidyverse,\ntmap,\nspdep, and\nfunModeling will be used for rapid Exploratory Data Analysis\n\n\npacman::p_load(sf, tidyverse, tmap, spdep, funModeling)\n\nIn this in-class data, two geospatial data sets will be used, they are:\ngeo_export\nnga_admbnda_adm2_osgod_20190417"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#importing-water-point-geospatial-data",
    "href": "Take-home_Ex1/Take-home_Ex1.html#importing-water-point-geospatial-data",
    "title": "Take home Exercise 1",
    "section": "Importing water point geospatial data",
    "text": "Importing water point geospatial data\nFirst, we are going to import the water point geospatial data by using the code chunk below.\n\nwp <- st_read(dsn = \"geodata\",\n              layer = \"geo_export\",\n              crs = 4326)%>%\n  filter(clean_coun == \"Nigeria\")\n\nnext, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.\n\nwrite_rds(wp, \"geodata/wp_nga.rds\")\n\nNext, we are going to import the LGA boundary data into R environment by using the code chunk below.\n\nnga <- st_read(dsn = \"geodata\",\n               layer = \"nga_admbnda_adm2_osgof_20190417\",\n               crs = 4326)"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "href": "Take-home_Ex1/Take-home_Ex1.html#data-wrangling",
    "title": "Take home Exercise 1",
    "section": "Data Wrangling",
    "text": "Data Wrangling\nRecoding NA values into string\nIn the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,\n\nwp_nga <- read_rds(\"geodata/wp_nga.rds\")%>%\n  mutate(status_cle = replace_na(status_cle, \"Unknown\"))"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#eda",
    "href": "Take-home_Ex1/Take-home_Ex1.html#eda",
    "title": "Take home Exercise 1",
    "section": "EDA",
    "text": "EDA\nIn the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.\n\nfreq(data = wp_nga,\n     input = 'status_cle')\n\nExtracting funtional water point\nusing classes in status_cle field.\n\nwpt_functional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Functional\", \n             \"Functional but not in use\",\n             \"Functional but needs repair\"))\n\n\nfreq(data=wpt_functional, \n     input = 'status_cle')\n\nSo all functional data will be called as wpt_functional.\nSimilarly for non-functional water point.\n\nwpt_nonfunctional <- wp_nga %>%\n  filter(status_cle %in%\n           c(\"Abandoned/Decommissioned\", \n             \"Abandoned\",\n             \"Non-Functional\",\n             \"Non functional due to dry season\",\n             \"Non-Functional due to dry season\"))\n\nExtracting water point with Unknown class.\nUsing filter() of dplyr to select water points with unknown status.\n\nwpt_unknown <- wp_nga %>%\n  filter(status_cle == \"Unknown\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "href": "Take-home_Ex1/Take-home_Ex1.html#performing-point-in-polygon-count",
    "title": "Take home Exercise 1",
    "section": "Performing point in polygon count",
    "text": "Performing point in polygon count\n\nnga_wp <- nga %>% \n  mutate(`total wpt` = lengths(\n    st_intersects(nga, wp_nga))) %>%\n  mutate(`wpt functional` = lengths(\n    st_intersects(nga, wpt_functional))) %>%\n  mutate(`wpt non-functional` = lengths(\n    st_intersects(nga, wpt_nonfunctional))) %>%\n  mutate(`wpt unknown` = lengths(\n    st_intersects(nga, wpt_unknown)))\n\nSaving the Analytical Data Table\n\nnga_wp <- nga_wp %>%\n  mutate(pct_functional = `wpt functional`/`total wpt`) %>%\n  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%\n  select(3:4, 9:10, 18:23)\n\nNow I got the tidy sf data table and we will save the sf data table in rds format.\n\nwrite_rds(nga_wp, \"geodata/nga_wp.rds\")"
  },
  {
    "objectID": "Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "href": "Take-home_Ex1/Take-home_Ex1.html#visualising-the-spatial-distribution-of-water-points",
    "title": "Take home Exercise 1",
    "section": "Visualising the spatial distribution of water points",
    "text": "Visualising the spatial distribution of water points\n\nnga_wp <- read_rds(\"geodata/nga_wp.rds\")\ntotal <- qtm(nga_wp, \"total wpt\") +\n  tm_layout(legend.height = 0.25, legend.width = 0.35)\nwp_functional <- qtm(nga_wp, \"wpt functional\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\nwp_nonfunctional <- qtm(nga_wp, \"wpt non-functional\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\nunknown <- qtm(nga_wp, \"wpt unknown\") +\n   tm_layout(legend.height = 0.25, legend.width = 0.35)\n\n\ntmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2 )\n\n\n\n\nComputing (Queen) contiguity based neighbours\n\nwm_q <- poly2nb(nga_wp, queen = TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\nLink number distribution:\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12  14 \n  1   2  14  57 125 182 140 122  72  41  12   4   1   1 \n2 least connected regions:\n138 560 with 1 link\n1 most connected region:\n508 with 14 links\n\n\nThe summary report shows that there are 774 region in Nigeria. Region 86 has no neighbour, 138 and 506 has only 1 neighbour and region 508 has the most number of neighbour 14.\n\nwm_q[[1]]\n\n[1]   2 548 624 721\n\n\n\nnga_wp$ADM2_EN[1]\n\n[1] \"Aba North\"\n\n\n\nnb1 <- wm_q[[1]]\nnb1 <- nga_wp$ADM2_EN[nb1]\nnb1\n\n[1] \"Aba South\"     \"Obi Ngwa\"      \"Osisioma Ngwa\" \"Ugwunagbo\"    \n\n\n\nset.ZeroPolicyOption(TRUE)\n\n[1] FALSE\n\n\n\nrswm_q <- nb2listw(wm_q,\n                   style = \"W\",\n                   zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 774 \nNumber of nonzero links: 4440 \nPercentage nonzero weights: 0.7411414 \nAverage number of links: 5.736434 \n1 region with no links:\n86\n\nWeights style: W \nWeights constants summary:\n    n     nn  S0       S1       S2\nW 773 597529 773 285.0658 3198.414\n\n\nMaron’s | test\n\nmoran.test(nga_wp$`wpt non-functional`,\n           listw = rswm_q,\n           zero.policy = TRUE,\n           na.action = na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  nga_wp$`wpt non-functional`  \nweights: rswm_q  n reduced by no-neighbour observations\n  \n\nMoran I statistic standard deviate = 20.043, p-value < 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.433932927      -0.001295337       0.000471516 \n\n\nComputing Monte Carlo Moran’s |\n\nset.seed(1234)\nbperm = moran.mc(nga_wp$`wpt non-functional`,\n                 listw = rswm_q,\n                 nsim = 999,\n                 zero.policy = TRUE,\n                 na.action = na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  nga_wp$`wpt non-functional` \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.43393, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\n\nVisualising Monte Carlo Moran’s |\n\nmean(bperm$res[1:999])\n\n[1] -0.0005316305\n\n\n\nvar(bperm$res[1:999])\n\n[1] 0.0004973974\n\n\n\nsummary(bperm$res[1:999])\n\n      Min.    1st Qu.     Median       Mean    3rd Qu.       Max. \n-0.0651127 -0.0150421 -0.0020783 -0.0005316  0.0143726  0.0798599 \n\n\n\nggplot(as.data.frame(bperm[7]),aes(x=res)) +\n  geom_density(fill = \"lightgrey\") +\n  geom_vline(aes(xintercept=0.43393),\n             color = \"red\", linetype = \"dashed\", size = 1) +\n  labs(title = \"Monte Carlo simulation of Moran's |\",\n       x = \"Test statistic\",\n       y = \"Density\")\n\n\n\n\nCompute Spatial Correlogram\n\nMI_corr <- sp.correlogram(wm_q,\n                          nga_wp$`wpt non-functional`,\n                          order = 6,\n                          method = \"I\",\n                          style = \"W\")\nplot(MI_corr)\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for nga_wp$`wpt non-functional` \nmethod: Moran's I\n           estimate expectation    variance standard deviate Pr(I) two sided\n1 (773)  4.3393e-01 -1.2953e-03  4.7152e-04          20.0433       < 2.2e-16\n2 (773)  2.6647e-01 -1.2953e-03  2.0206e-04          18.8374       < 2.2e-16\n3 (773)  1.9507e-01 -1.2953e-03  1.2189e-04          17.7863       < 2.2e-16\n4 (773)  1.4019e-01 -1.2953e-03  8.7589e-05          15.1181       < 2.2e-16\n5 (773)  6.3735e-02 -1.2953e-03  6.8779e-05           7.8413       4.459e-15\n6 (773)  2.1698e-02 -1.2953e-03  5.7380e-05           3.0354        0.002402\n           \n1 (773) ***\n2 (773) ***\n3 (773) ***\n4 (773) ***\n5 (773) ***\n6 (773) ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\nCompute local Moran’s |\n\nfips <- order(nga_wp$ADM2_EN)\nlocalMI <- localmoran(nga_wp$`wpt non-functional`,rswm_q)\nhead(localMI)\n\n           Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.32365786 -9.995243e-04 1.924638e-01 -0.73547576     0.46204980\n2  0.07000542 -4.092463e-05 1.053077e-02  0.68258288     0.49487045\n3  1.25819985 -1.627684e-03 4.181728e-01  1.94819847     0.05139122\n4 -0.03537489 -5.427505e-05 5.954304e-03 -0.45773361     0.64714384\n5  0.01201533 -2.590965e-04 3.988998e-02  0.06145673     0.95099547\n6  0.00768085 -1.538445e-07 1.687859e-05  1.86960486     0.06153871\n\n\n\nnga_wp.localMI <- cbind(nga_wp,localMI) %>%\n  rename(Pr.Ii = Pr.z....E.Ii..)\n\nMapping local moran’s | values\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\",\n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width = 0.35,\n            legend.height = 0.25)\n\n\n\n\nMapping local Moran’s | p-values\n\ntm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\",\n          breaks = c(-Inf,0.001, 0.01, 0.05, 0.1,Inf),\n          palette = \"-Blues\",\n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(legend.width = 0.35,\n            legend.height = 0.25)\n\n\n\n\nMapping both local Moran’s | values and p-values\n\nlocalMI.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map <- tm_shape(nga_wp.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, ncol=2)\n\n\n\n\nCreating a Lisa cluster Map"
  }
]