---
title: "Take home Exercise 1"
editor: visual
execute: 
  warning: false
  message: false
format: html
---

## 

# Take-home Exercise 1: Geospatial Analytics for Social Good

## Setting the Scene

Water is an important resource to mankind. Clean and accessible water is critical to human health. It provides a healthy environment, a sustainable economy, reduces poverty and ensures peace and security. Yet over 40% of the global population does not have access to sufficient clean water. By 2025, 1.8 billion people will be living in countries or regions with absolute water scarcity, according to UN-Water. The lack of water poses a major threat to several sectors, including food security. Agriculture uses about 70% of the world's accessible freshwater.

Developing countries are most affected by water shortages and poor water quality. Up to 80% of illnesses in the developing world are linked to inadequate water and sanitation. Despite technological advancement, providing clean water to the rural community is still a major development issues in many countries globally, especially countries in the Africa continent.

To address the issue of providing clean and sustainable water supply to the rural community, a global [Water Point Data Exchange (WPdx)](https://www.waterpointdata.org/about/) project has been initiated. The main aim of this initiative is to collect water point related data from rural areas at the water point or small water scheme level and share the data via WPdx Data Repository, a cloud-based data library. What is so special of this project is that data are collected based on [WPDx Data Standard](https://www.waterpointdata.org/wp-content/uploads/2021/04/WPDx_Data_Standard.pdf).

## Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf,

-   tidyverse,

-   tmap,

-   spdep, and

-   funModeling will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

In this in-class data, two geospatial data sets will be used, they are:

geo_export

nga_admbnda_adm2_osgod_20190417

## Importing water point geospatial data

First, we are going to import the water point geospatial data by using the code chunk below.

```{r,eval=FALSE}

wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326)%>%
  filter(clean_coun == "Nigeria")
```

next, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.

```{r, eval=FALSE}
write_rds(wp, "geodata/wp_nga.rds")
```

Next, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r, eval=FALSE}
nga <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

## Data Wrangling

**Recoding NA values into string**

In the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,

```{r,eval=FALSE}
wp_nga <- read_rds("geodata/wp_nga.rds")%>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

## EDA

In the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.

```{r,eval=FALSE}
freq(data = wp_nga,
     input = 'status_cle')
```

Extracting funtional water point

using classes in status_cle field.

```{r,eval=FALSE}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r,eval=FALSE}
freq(data=wpt_functional, 
     input = 'status_cle')
```

So all functional data will be called as wpt_functional.

Similarly for non-functional water point.

```{r,eval=FALSE}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

Extracting water point with Unknown class.

Using filter() of dplyr to select water points with unknown status.

```{r,eval=FALSE}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing point in polygon count

```{r,eval=FALSE}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

Saving the Analytical Data Table

```{r,eval=FALSE}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Now I got the tidy sf data table and we will save the sf data table in rds format.

```{r,eval=FALSE}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

```{r,eval=FALSE}
nga_wp <- st_transform(nga_wp, 26391)
```

## Visualising the spatial distribution of water points

```{r}

nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt") +
  tm_layout(legend.height = 0.25, legend.width = 0.35)
wp_functional <- qtm(nga_wp, "wpt functional") +
   tm_layout(legend.height = 0.25, legend.width = 0.35)
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional") +
   tm_layout(legend.height = 0.25, legend.width = 0.35)
unknown <- qtm(nga_wp, "wpt unknown") +
   tm_layout(legend.height = 0.25, legend.width = 0.35)


tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2 )

```

From the graph we can tell that the number of water point is not evenly distributed.

```{r}
st_crs(nga_wp)
```

## Visualising Regional Development Indicator

```{r}
equal <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "equal") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal interval classification")

quantile <- tm_shape(nga_wp) +
  tm_fill("wpt non-functional",
          n = 5,
          style = "quantile") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Equal quantile classification")

tmap_arrange(equal, 
             quantile, 
             asp=1, 
             ncol=2)
```

The data is in polygon, however, there is a large variation in polygon size. To ensure the consistency scale of analysis, fixed distance method will be using.

## Determine the centroid for each area

```{r}
coords <- st_centroid(st_geometry(nga_wp))
```

## Determine the cutoff distance for fixed distance weight matrix

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords))
summary(k1dists)
```

The summary report shows that the maximum distance is 72.027 km, so this will be using as the upper threshold so that the distance band is large enough to ensure all features will have at least one neighbor.

```{r}
threshold <- max(unlist(nbdists(k1, coords)))
```

## Computing Fixed distance weight matrix

```{r}
wm_d73 <- dnearneigh(coords, 0, threshold)
wm_d73
```

We are able to identify there is an average of 23 neighbors per region.

## Visualizing the Distance weight Matrix

```{r}
par(mfrow=c(1,2))
plot(nga_wp$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(nga_wp$geometry, border="lightgrey", main="Distance link")
plot(wm_d73, coords, add=TRUE, pch = 19, cex = 0.6)
```

## Assigning weights to each neighboring polygon

```{r}
wm73_lw <- nb2listw(wm_d73, 
                   style="W", 
                   zero.policy = TRUE)
summary (wm73_lw )
```

In our case, each neighboring polygon will be assigned equal weight (style="W"). This is accomplished by assigning the fraction 1/(#ofneighbors) to each neighboring county then summing the weighted income values. While this is the most intuitive way to summaries the neighbors' values it has one drawback in that polygons along the edges of the study area will base their lagged values on fewer polygons thus potentially over- or under-estimating the true nature of the spatial autocorrelation in the data.

## see the weight of the first polygon's neighbors

```{r}
wm73_lw$weights[10]
```

## Using Moran's \| for Global Spatial Autocorrelation

```{r}
moran.test(nga_wp$`wpt non-functional`, 
           listw=wm73_lw, 
           zero.policy = TRUE, 
           na.action=na.omit)
```

From the Moran's \| test, we can see that the p-value is 2.2e-16 and I value is 0.3264 which means that the overall spatial autocorrelation tend to be similarly clustered and is statically significant, null hypothesis can be rejected. To furture clarify the assumption of Moran's I. Monte Carlo simulation will be performed.

## Computing Monte Carlo Moran's \|

A total of 1000 simulation will be performed

```{r}
set.seed(1234)
MC_NF= moran.mc(nga_wp$`wpt non-functional`, 
                listw=wm73_lw, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
MC_NF
```

```{r}
set.seed(1234)
MC_F= moran.mc(nga_wp$`wpt functional`, 
                listw=wm73_lw, 
                nsim=999, 
                zero.policy = TRUE, 
                na.action=na.omit)
MC_F
```

From the result Moran \| value is \> 0,the overall spatial autocorrelation tend to be similarly clustered. The p value is 0.001 which is statically significant. Therefore, null hypothesis should be rejected. There is sign of clustering.

## 

Visualising Monte Carlo simulation of Moran's \|

```{r}
hist(MC_NF$res, 
     freq=TRUE, 
     breaks=100, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

```{r}
hist(MC_F$res, 
     freq=TRUE, 
     breaks=100, 
     xlab="Simulated Moran's I")
abline(v=0, 
       col="red") 
```

## Compute Moran's \| correlogram

```{r,eval=FALSE}

plot(MI_corr)


```

From the correlogram, it tells that Moran's \| decreasing when lags increase. Which means that the observation is moving more Dispersed with increasing of distance.

```{r,eval=FALSE}
plot(MI_corr_F)
```

From the correlogram, it tells that Moran's \| decreasing when lags increase. Which means that the observation is moving more Dispersed with increasing of distance.

## Cluster and Outlier Analysis

local Moran's \| will be used to identify the spatial cluster and outliers.

```{r}
fips <- order(nga_wp$ADM2_EN)
localMI_dw <- localmoran(nga_wp$`wpt non-functional`, wm73_lw)
localMI_dw_FUN <- localmoran(nga_wp$`wpt functional`, wm73_lw)
head(localMI_dw)
```

```{r}
head(localMI_dw_FUN)
```

*localmoran()* function returns a matrix of values whose columns are:

-   Ii: the local Moran's I statistics

-   E.Ii: the expectation of local moran statistic under the randomisation hypothesis

-   Var.Ii: the variance of local moran statistic under the randomisation hypothesis

-   Z.Ii:the standard deviate of local moran statistic

-   Pr(): the p-value of local moran statistic

Mapping the local Moran's \|

```{r}
nga_wp.localMI <- cbind(nga_wp,localMI_dw) %>%
  rename(Pr.Ii.nf = Pr.z....E.Ii..)
nga_wp.localMI <- cbind(nga_wp.localMI,localMI_dw_FUN) %>%
  rename(Pr.Ii.f = Pr.z....E.Ii..)
```

#### Mapping local Moran's I value

To identify the outliers and clusters, we will filter all the areas which are not statistically significant.

```{r}
Moran_NF <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Non Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
  

Moran_F <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +
  tm_fill(col = "Ii.1", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

tmap_arrange(Moran_NF, Moran_F, asp = 1, ncol = 2)
```

#### Mapping local Moran's I p-values

```{r}
p_value_nf <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.nf", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Non-Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)


p_value_f <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.f", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Greens",
          title = "local Moran's I p-values" ) +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

tmap_arrange(p_value_nf, p_value_f, asp=1, ncol=2)
```

#### Mapping both local Moran's I values and p-values

```{r}
Moran_NF <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.nf <= 0.05,]) +
  tm_fill(col = "Ii", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Non Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
  

Moran_F <- tm_shape(nga_wp.localMI) + 
  tm_fill("white") +
  tm_borders("grey", lwd = 0.5, alpha = 0.5) +
  tm_shape(nga_wp.localMI[nga_wp.localMI$Pr.Ii.f <= 0.05,]) +
  tm_fill(col = "Ii.1", 
          style = "pretty",
          palette = "RdBu",
          title = "local moran statistics") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "Local Moran I value for p < 0.05 (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)

p_value_nf <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.nf", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Blues",
          title = "local Moran's I p-values") +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Non-Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)


p_value_f <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "Pr.Ii.f", 
          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),
          palette="-Greens",
          title = "local Moran's I p-values" ) +
  tm_borders(alpha = 0.5) +
  tm_layout(main.title = "P-value (Functional)",
            main.title.size = 0.7,
            main.title.fontface = "bold",
            title = "Fixed Distance Weight",
            title.size = 0.6,
            legend.height = 0.25,
            legend.width = 0.35)
tmap_arrange(Moran_NF, Moran_F, p_value_nf, p_value_f, asp=1, ncol=2)
```

## Creating a LISA Cluster Map

### Plotting Moran scatterplot

```{r}
nci <- moran.plot(nga_wp$`wpt non-functional`, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Non Functional Water Point", 
                  ylab="Spatially Lag Non Funtional Water Point")
```

```{r}
nci1 <- moran.plot(nga_wp$`wpt functional`, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="Functional Water Point", 
                  ylab="Spatially Lag Funtional Water Point")

```

### Preparing LISA map classes

```{r}
nga_wp$Z.nonfunc <- scale(nga_wp$`wpt non-functional`) %>% 
  as.vector 
nga_wp$Z.Func <- scale(nga_wp$`wpt functional`)%>%
  as.vector
```

```{r}

nci2 <- moran.plot(nga_wp$Z.nonfunc, wm73_lw,
                   labels=as.character(nga_wp$ADM2_EN),
                   xlab="z-Non-functional Water Point", 
                   ylab="Spatially Lag z-Non-functional Water Point")

```

```{r}
nci3 <- moran.plot(nga_wp$Z.Fun, wm73_lw,
                  labels=as.character(nga_wp$ADM2_EN), 
                  xlab="z-Functional Water Point", 
                  ylab="Spatially Lag Funtional Water Point")
```

The code chunks below show the steps to prepare a LISA cluster map.

```{r}
quadrant <- vector(mode="numeric",length=nrow(localMI_dw))
                   
```

```{r}

quadrant2 <- vector(mode="numeric",length=nrow(localMI_dw_FUN))
```

## scale waterpoint

```{r}
DV <- scale(nga_wp.localMI$wpt.non.functional)
DV_Fun <- scale(nga_wp.localMI$wpt.functional)  
```

Finding the lag of the scaled percentage of functional and non-functional water point.

```{r}
C_mI <- lag.listw(wm73_lw, DV)
C_mI_Fun <- lag.listw(wm73_lw, DV_Fun)

```

Making use of Moran Scatterplot below, we filter all the area with p-value\<0.05 and identify significant areas.

```{r}
MIplot <- data.frame(cbind(DV,C_mI,localMI_dw[,5]))
MIplot <- MIplot %>%
  filter (X3 < 0.05)
plot(x = MIplot$X1, y = MIplot$X2, main = "Moran Scatterplot Fixed Distance", xlab = "scaled Non-Functional (%)", ylab = "Lag scaled Non-Functional (%)")
abline(h = 0, v = 0)
```

```{r}
MIplot <- data.frame(cbind(DV_Fun,C_mI,localMI_dw[,5]))
MIplot <- MIplot %>%
  filter (X3 < 0.05)
plot(x = MIplot$X1, y = MIplot$X2, main = "Moran Scatterplot Fixed Distance", xlab = "scaled Functional (%)", ylab = "Lag scaled Functional (%)")
abline(h = 0, v = 0)
```

```{r}
signif <- 0.05 
quadrant[DV >0 & C_mI>0] <- 4      
quadrant[DV <0 & C_mI<0] <- 1      
quadrant[DV <0 & C_mI>0] <- 2
quadrant[DV >0 & C_mI<0] <- 3
quadrant[localMI_dw[,5]>signif] <- 0
#nga_wp.localMI$quadrant <- quadrant

#quadrant2[DV_Fun >0 & C_mI>0] <- 4      
#quadrant2[DV_Fun <0 & C_mI<0] <- 1      
#quadrant2[DV_Fun <0 & C_mI>0] <- 2
#quadrant2[DV_Fun >0 & C_mI<0] <- 3
#quadrant2[localMI_dw[,5]>signif] <- 0
#nga_wp.localMI$quadrantfun <- quadrant2
```

## Plotting Lisa map

```{r}
#nga_wp.localMI$quadrant <- quadrant
#colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
#clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")
#
#tm_shape(nga_wp.localMI) +
#  tm_fill(col = "quadrant", 
#          style = "cat", 
#          palette = colors[c(sort(unique(quadrant)))+1], 
#          labels = clusters[c(sort(unique(quadrant)))+1],
#         popup.vars = c("")) +
#  tm_view(set.zoom.limits = c(11,17)) +
#  tm_borders(alpha=0.5)
```

```{r}
#nga_wp.localMI$quadrantfun <- quadrant
#colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
#clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

#tm_shape(nga_wp.localMI) +
#  tm_fill(col = "quadrantfun", 
#          style = "cat", 
#          palette = colors[c(sort(unique(quadrant2)))+1], 
#          labels = clusters[c(sort(unique(quadrant2)))+1],
#          popup.vars = c("")) +
#  tm_view(set.zoom.limits = c(11,17)) +
#  tm_borders(alpha=0.5)
```

For effective interpretation, it is better to plot both the local Moran's I values map and its corresponding p-values map next to each other.

```{r}
Water_Point <- qtm(nga_wp, "wpt non-functional") +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) + 
  tm_layout(legend.height = 0.25,
            legend.width = 0.35,
            main.title = "Number of non-functional water point",
            main.title.size = 0.7,main.title.fontface = "bold",
            main.title.position = "center")

nga_wp.localMI$quadrant <- quadrant
colors <- c("#ffffff", "#2c7bb6", "#abd9e9", "#fdae61", "#d7191c")
clusters <- c("insignificant", "low-low", "low-high", "high-low", "high-high")

LISAmap <- tm_shape(nga_wp.localMI) +
  tm_fill(col = "quadrant", 
          style = "cat", 
          palette = colors[c(sort(unique(quadrant)))+1], 
          labels = clusters[c(sort(unique(quadrant)))+1],
          popup.vars = c("")) +
  tm_view(set.zoom.limits = c(11,17)) +
  tm_borders(alpha=0.5) + 
  tm_layout(legend.height = 0.25,
            legend.width = 0.35,
            main.title = "LISA Map with Quadrant",
            main.title.size = 0.7,main.title.fontface = "bold",
            main.title.position = "center")

tmap_arrange(Water_Point, LISAmap, Moran_NF, p_value_nf, asp=1, ncol=2)
```

```{r}

```

## Hot spot Area Analysis

### Computing Gi statistics

### Gi statistic using fixed distance

```{r}
fips <- order(nga_wp$ADM2_EN)
gi.fixed <- localG(nga_wp$`wpt non-functional`,wm73_lw)
gi.fixed
```

```{r}
fips <- order(nga_wp$ADM2_EN)
gi.fixed_fun <- localG(nga_wp$`wpt functional`,wm73_lw)
gi.fixed_fun
```

```{r}
nga_wp.gi <- cbind(nga_wp, as.matrix(gi.fixed)) %>%
  rename(gstat_fixed = as.matrix.gi.fixed.)
```

```{r}
nga_wp.gi_fun <- cbind(nga_wp, as.matrix(gi.fixed_fun)) %>%
  rename(gstat_fixed_fun = as.matrix.gi.fixed_fun.)
```

```{r}
nonfunction <- qtm(nga_wp, "wpt non-functional")


Gimap <- tm_shape(nga_wp.gi) +
  tm_fill(col = "gstat_fixed",
          midpoint = 0,
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(nonfunction, Gimap,  asp=1, ncol=2)
```

```{r}
functional <- qtm(nga_wp, "wpt functional")


Gimap_fun <- tm_shape(nga_wp.gi_fun) +
  tm_fill(col = "gstat_fixed_fun",
          midpoint = 0,
          style = "pretty",
          palette="-RdBu",
          title = "local Gi") +
  tm_borders(alpha = 0.5)

tmap_arrange(functional, Gimap_fun,  asp=1, ncol=2)
```

## 
