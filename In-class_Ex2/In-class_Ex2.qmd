---
title: "In-class_Ex2"
editor: visual
execute: 
  warning: false
  message: false
format: html
---

## Overview

## Getting Started

In the code chunk below, `p_load()` of *pacman* package is used to install and load the following R packages into R environment:

-   sf,

-   tidyverse,

-   tmap,

-   spdep, and

-   funModeling will be used for rapid Exploratory Data Analysis

```{r}
pacman::p_load(sf, tidyverse, tmap, spdep, funModeling)
```

In this in-class data, two geospatial data sets will be used, they are:

geo_export

nga_admbnda_adm2_osgod_20190417

## Importing water point geospatial data

First, we are going to import the water point geospatial data by using the code chunk below.

```{r}

wp <- st_read(dsn = "geodata",
              layer = "geo_export",
              crs = 4326)%>%
  filter(clean_coun == "Nigeria")
```

next, write_rds() of readr package is used to save the extracted sf data table into an output file in rds data format. The output file is called wp_nga.rds and is is save in geodata subfoulder.

```{r}
write_rds(wp, "geodata/wp_nga.rds")
```

Next, we are going to import the LGA boundary data into R environment by using the code chunk below.

```{r}
nga <- st_read(dsn = "geodata",
               layer = "nga_admbnda_adm2_osgof_20190417",
               crs = 4326)
```

## Data Wrangling

**Recoding NA values into string**

In the code chunk below, replace_na() is used to recode all the NA values in status_cle field into unknow,

```{r}
wp_nga <- read_rds("geodata/wp_nga.rds")%>%
  mutate(status_cle = replace_na(status_cle, "Unknown"))
```

## EDA

In the code chunk below, freq() of funModeling package is used to display the distribution of status_cle field in wp_nga.

```{r}
freq(data = wp_nga,
     input = 'status_cle')
```

Extracting funtional water point

using classes in status_cle field.

```{r}
wpt_functional <- wp_nga %>%
  filter(status_cle %in%
           c("Functional", 
             "Functional but not in use",
             "Functional but needs repair"))
```

```{r}
freq(data=wpt_functional, 
     input = 'status_cle')
```

So all functional data will be called as wpt_functional.

Similarly for non-functional water point.

```{r}
wpt_nonfunctional <- wp_nga %>%
  filter(status_cle %in%
           c("Abandoned/Decommissioned", 
             "Abandoned",
             "Non-Functional",
             "Non functional due to dry season",
             "Non-Functional due to dry season"))
```

Extracting water point with Unknown class.

Using filter() of dplyr to select water points with unknown status.

```{r}
wpt_unknown <- wp_nga %>%
  filter(status_cle == "Unknown")
```

## Performing point in polygon count

```{r}
nga_wp <- nga %>% 
  mutate(`total wpt` = lengths(
    st_intersects(nga, wp_nga))) %>%
  mutate(`wpt functional` = lengths(
    st_intersects(nga, wpt_functional))) %>%
  mutate(`wpt non-functional` = lengths(
    st_intersects(nga, wpt_nonfunctional))) %>%
  mutate(`wpt unknown` = lengths(
    st_intersects(nga, wpt_unknown)))
```

Saving the Analytical Data Table

```{r}
nga_wp <- nga_wp %>%
  mutate(pct_functional = `wpt functional`/`total wpt`) %>%
  mutate(`pct_non-functional` = `wpt non-functional`/`total wpt`) %>%
  select(3:4, 9:10, 18:23)
```

Now I got the tidy sf data table and we will save the sf data table in rds format.

```{r}
write_rds(nga_wp, "geodata/nga_wp.rds")
```

## Visualising the spatial distribution of water points

```{r}
nga_wp <- read_rds("geodata/nga_wp.rds")
total <- qtm(nga_wp, "total wpt")
wp_functional <- qtm(nga_wp, "wpt functional")
wp_nonfunctional <- qtm(nga_wp, "wpt non-functional")
unknown <- qtm(nga_wp, "wpt unknown")

tmap_arrange(total, wp_functional, wp_nonfunctional, unknown, asp=1, ncol=2)
```
