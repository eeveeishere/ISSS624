---
title: "In-class Exercise 5"
editor: visual
---

Getting start

```{r}
pacman::p_load(sf,tidyverse, funModeling, blorr, corrplot, ggpubr, sf, spdep, GWmodel, tmap, skimr, caret, report)
```

Data import

Save data as rds for data for the ease of other people.

```{r}
Osun <- read_rds("rds/Osun.rds")
Osun_wp_sf <- read_rds("rds/Osun_wp_sf.rds")
```

```{r}
Osun_wp_sf %>%
  freq(input = 'status')
```

```{r}
tmap_mode("view")
tm_shape(Osun)+
# tmap_options(check.and.fix = TRUE)
  tm_polygons(alpha = 0.4) +
tm_shape(Osun_wp_sf) +
  tm_dots(col = "status",
          alpha = 0.6) +
  tm_view(set.zoom.limits = c(9,12))
```

## EDA

summary statistics with skimr

```{r}
Osun_wp_sf %>%
  skim()
```

20 percent missing data point is already not good the analysis.

```{r}
Osun_wp_sf_clean <- Osun_wp_sf %>%
  filter_at(vars(status,
                 distance_to_primary_road,
                 distance_to_secondary_road,
                 distance_to_tertiary_road,
                 distance_to_city,
                 distance_to_town,
                 water_point_population,
                 local_population_1km,
                 usage_capacity,
                 is_urban,
                 water_source_clean),
            all_vars(!is.na(.))) %>%
  mutate(usage_capacity = as.factor(usage_capacity))
```

Correlation Analysis

```{r}
Osun_wp <- Osun_wp_sf_clean %>%
  select(c(7,35:39,42:43, 46:47, 57)) %>%
  st_set_geometry(NULL)
```

```{r,fig.width=5, fig.height=5}
cluster_vars.cor = cor(
  Osun_wp[,2:7])
corrplot.mixed(cluster_vars.cor,
               lower = "ellipse",
               upper = "number",
               tl.pos = "lt",
               diag = "l",
               tl.col = "black")
```

```{r}
model <- glm(status ~ distance_to_primary_road+
               distance_to_secondary_road+
               distance_to_tertiary_road+
               distance_to_city+
               distance_to_town+
               is_urban+
               usage_capacity+
               water_source_clean+
               water_point_population+
               local_population_1km,
             data = Osun_wp_sf_clean,
             family = binomial(link = 'logit'))
model                 
```

Using blr_regress() for a better report.

```{r}
blr_regress(model)
```

```{r}
report(model)
```

Exclude the objects that is not statistically significant, p_value\> 0.05.

```{r}
blr_confusion_matrix(model, cutoff = 0.5)
```

The validity of a cut off is measured using sensitivity, specificity and accuracy.

0.5 is the cut off point the functional and non functional. We have the flexibility to set the value.

True positive is better than true negative.

```{r}
Osun_wp_sp <- Osun_wp_sf_clean %>%
  select(c(status,
           distance_to_primary_road,
           distance_to_secondary_road,
           distance_to_tertiary_road,
           distance_to_city,
           distance_to_town,
           water_point_population,
           local_population_1km,
           usage_capacity,
           is_urban,
           water_source_clean)) %>%
  as_Spatial()
Osun_wp_sp
Osun_wp_sp
```

```{r}
bw.fixed <- bw.ggwr(status ~ 
               distance_to_primary_road+
               distance_to_secondary_road+
               distance_to_tertiary_road+
               distance_to_city+
               distance_to_town+
               water_point_population+
               local_population_1km+
               is_urban+
               usage_capacity+
               water_source_clean,
             data = Osun_wp_sp,
             family = "binomial",
             approach = "AIC",
             kernel = "gaussian",
             adaptive = FALSE,
             longlat = FALSE)
```

```{r}
bw.fixed
```

```{r}
gwlr.fixed <- ggwr.basic(status ~
                           distance_to_primary_road +
                           distance_to_secondary_road +
                           distance_to_tertiary_road +
                           distance_to_city +
                           distance_to_town +
                           water_point_population +
                           local_population_1km +
                           usage_capacity +
                           is_urban +
                           water_source_clean,
                         data = Osun_wp_sp,
                         bw = 2597.255,
                         family = "binomial",
                         kernel = "gaussian",
                         adaptive = FALSE,
                         longlat = FALSE)
```

```{r}
gwr.fixed <- as.data.frame(gwlr.fixed$SDF)
```

Next we will label yhat value greater or equal to 0.5 into 1 and else 0. The result of the logi comparison operation will be saved into a field called most.

```{r}
gwr.fixed <- gwr.fixed %>%
  mutate(most = ifelse(
    gwr.fixed$yhat >= 0.5, T, F
  ))
```

```{r}
gwr.fixed$y <- as.factor(gwr.fixed$y)
gwr.fixed$most <- as.factor(gwr.fixed$most)
CM <- confusionMatrix(data=gwr.fixed$most, reference = gwr.fixed$y)
CM
```

The true nagative increase to 0.9. we have have applied localized strategy to for better analysis.

```{r}
Osun_wp_sf_selected <- Osun_wp_sf_clean %>%
  select(c(ADM2_EN, ADM2_PCODE,
           ADM1_EN, ADM1_PCODE,
           status))
```

```{r}
gwr_sf.fixed <- cbind(Osun_wp_sf_selected, gwr.fixed)
```

```{r}
tmap_mode("view")
prob_T <- tm_shape(Osun) + 
  tm_polygons(alpha = 0.1) + 
tm_shape(gwr_sf.fixed) + 
  tm_dots(col = "yhat",
          border.col = "gray60",
          border.lwd = 1) + 
  tm_view(set.zoom.limits = c(8,14))
prob_T
```
